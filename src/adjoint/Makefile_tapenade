#    -*- makefile -*-
#     ******************************************************************
#     *                                                                *
#     * File:          Makefile_tapenade                               *
#     * Author:        Gaetan Kenway                                   *
#     * Starting date: 08-02-2006                                      *
#     * Last modified: 10-24-2014                                      *
#     *                                                                *
#     * This makefile is used to create automatically differentated    *
#     * residual code that can be used to constuct the aerodynamic     *
#     * jacobian. There are three main commands:                       *
#     *                                                                *
#     * ad_forward: Run in forward mode. Preprocessed output is in     *
#     *             'foward' directory                                 *
#     *                                                                *
#     * ad_reverse: Run in reverse mode. Preprocessed output is in the *
#     *             'reverse' directory                                *
#     *                                                                *
#     * ad_reverse_fast: Run in reverse mode for the state-only code   *
#     *                                                                *
#     ******************************************************************

# Define the required directories
SRC = ..

# Integer, double and real precision (bytes)
TAPENADE_PRECISION = -i4 -dr8 -r8

ALL_RES_FILES =	$(SRC)/adjoint/adjointExtra.F90\
		$(SRC)/modules/surfaceFamilies.F90\
		$(SRC)/modules/monitor.f90\
		$(SRC)/modules/diffSizes.f90\
		$(SRC)/modules/block.F90\
		$(SRC)/modules/inputParam.F90\
		$(SRC)/modules/constants.F90\
		$(SRC)/modules/precision_tapenade.f90\
		$(SRC)/modules/iteration.f90\
		$(SRC)/modules/section.f90\
		$(SRC)/modules/communication.f90\
		$(SRC)/modules/paramTurb.F90\
		$(SRC)/modules/cgnsGrid.f90 \
		$(SRC)/modules/CpCurveFits.f90\
		$(SRC)/modules/blockPointers.F90 \
		$(SRC)/modules/BCPointers.F90 \
		$(SRC)/modules/flowVarRefState.F90 \
		$(SRC)/modules/wallDistanceData.F90\
		$(SRC)/modules/actuatorRegionData.F90\
		$(SRC)/modules/overset.F90\
		$(SRC)/modules/cgnsNames.f90\
		$(SRC)/modules/su_cgns.F90\
		$(SRC)/modules/BCDataMod.F90\
		$(SRC)/solver/BCRoutines.F90\
		$(SRC)/solver/fluxes.F90\
		$(SRC)/solver/solverUtils.F90\
		$(SRC)/solver/residuals.F90\
		$(SRC)/solver/surfaceIntegrations.F90\
		$(SRC)/solver/zipperIntegrations.F90\
		$(SRC)/solver/ALEUtils.F90\
		$(SRC)/initFlow/initializeFlow.F90\
		$(SRC)/turbulence/turbUtils.F90\
		$(SRC)/turbulence/turbBCRoutines.F90\
		$(SRC)/turbulence/turbMod.F90\
		$(SRC)/turbulence/sa.F90\
		$(SRC)/utils/flowUtils.F90\
		$(SRC)/utils/utils.F90\
		$(SRC)/utils/sorting.F90\
		$(SRC)/overset/oversetUtilities.F90\
		$(SRC)/wallDistance/wallDistance.F90\
		$(SRC)/bcdata/BCData.F90\



# intermediate preprocessed files.
I_RES_FILES := $(ALL_RES_FILES:%=%.f90)

# ---------------------------------------------------------------------

# ====================== Full List of Routines ==================
fullRoutines = "\
flowUtils%adjustInflowAngle(alpha, beta)>(veldirfreestream, dragdirection, liftdirection) \
\
initializeFlow%referenceState(mach, machcoef, pInfDim, TinfDim, rhoInfDim, velDirFreestream) > \
              (mach, machcoef, pInfDim, TinfDim, rhoInfDim, velDirFreeStream, \
               pRef, rhoRef, Tref, muRef, timeRef, pInf, pinfCorr, rhoInf, uInf, rGas, muInf,  winf) \
\
bcData%BCDataIsoThermalwall(bcVarArray, Tref) > \
                           (BCData%TNS_wall, Tref) \
\
bcData%BCDataSubsonicInflow(bcVarArray, muRef, Pref, rhoRef, Tref, Href, wInf) > \
	                   (bcData%PtInlet, bcData%ttInlet, bcData%htInlet, bcData%turbInlet, muRef, Pref, rhoRef, Tref, Href, wInf) \
\
bcData%BCDataSubsonicOutflow(bcVarArray, Pref) > \
	                    (bcData%Ps,  Pref) \
\
bcData%BCDataSupersonicInflow(bcVarArray, muRef, rhoRef, Pref, uRef, wInf, pInfCorr) > \
	                     (bcData%rho, bcData%velx, bcData%vely, bcData%velz, bcData%ps, bcData%turbInlet, muRef, rhoRef, Pref, uRef, wInf, pInfCorr) \
\
adjointExtra%xhalo_block(x) > \
                        (x) \
\
adjointExtra%volume_block(x) > \
                         (x, vol) \
\
adjointExtra%metric_block(x) > \
                         (x, si, sj, sk) \
wallDistance%updateWallDistancesQuickly(x, xSurf) > \
	                               (x, xSurf, d2wall) \
\
adjointExtra%boundaryNormals(si, sj, sk) > \
                            (si, sj, sk, bcdata%norm) \
\
flowUtils%computePressureSimple(w, pInfCorr) > \
                               (w, pInfCorr, p) \
\
flowUtils%computeLamViscosity(w, p, Tref, muRef, rGas) > \
                             (w, p, Tref, muRef, rGas, rlv) \
\
flowUtils%computeEtotBlock(w, p) > \
                          (w, p) \
\
turbUtils%computeEddyViscosity(w,rlv)>(w,rlv,rev) \
\
BCRoutines%bcSymm1stHalo(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2, bcData%norm) > \
                        (ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2, bcData%norm) \
\
BCRoutines%bcSymm2ndHalo(ww0, ww3, pp0, pp3, rlv0, rlv3, rev0, rev3, bcData%norm) > \
                        (ww0, ww3, pp0, pp3, rlv0, rlv3, rev0, rev3, bcData%norm) \
\
BCRoutines%bcSymmPolar1stHalo(xx, ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2) > \
                             (xx, ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2) \
\
BCRoutines%bcSymmPolar2ndHalo(xx, ww0, ww3, pp0, pp3, rlv0, rlv3, rev0, rev3) > \
                             (xx, ww0, ww3, pp0, pp3, rlv0, rlv3, rev0, rev3) \
\
BCRoutines%bcNSWallAdiabatic(ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2) > \
                            (ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2) \
\
BCRoutines%bcNSWallIsothermal(ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, rGas, BCData%TNS_Wall) > \
                             (ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, rGas, BCData%TNS_Wall) \
\
BCRoutines%bcFarField(ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, pInfCorr, wInf, bcData%norm) > \
                     (ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, pInfCorr, wInf, bcData%norm) \
\
BCRoutines%bcEulerWall(ww0, ww1, ww2, pp0, pp1, pp2, pp3, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, ssi, ssj, ssk, ss) > \
                      (ww0, ww1, ww2, pp0, pp1, pp2, pp3, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, ssi, ssj, ssk, ss) \
\
BCRoutines%bcSubsonicInflow(ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, bcData%PtInlet, bcData%ttInlet, bcData%htInlet) > \
                           (ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, bcData%PtInlet, bcData%ttInlet, bcData%htInlet) \
\
BCRoutines%bcSubsonicOutflow(ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, bcData%Ps) > \
                            (ww0, ww1, ww2, pp0, pp1, pp2, rlv0, rlv1, rlv2, rev0, rev1, rev2, bcData%norm, bcData%Ps) \
\
turbBCRoutines%applyAllTurbBCThisBlock(rev, w, bvtj1, bvtj2, bvtk1, bvtk2, bvti1, bvti2) > \
                                      (rev, w) \
\
turbBCRoutines%bcTurbTreatment(w, rlv, d2wall, winf) > \
                              (w, rlv, d2wall, winf, bvtj1, bvtj2, bvtk1, bvtk2, bvti1, bvti2) \
\
solverUtils%timeStep_block(w, pInfCorr, rhoInf, si, sj, sk, p) > \
              (w, pInfCorr, rhoInf, si, sj, sk, p, radi, radj, radk) \
\
sa%saSource(w, rlv, vol, si, sj, sk, timeRef, d2wall) > \
           (w, rlv, vol, si, sj, sk, timeREf, scratch) \
\
turbutils%turbAdvection(w, vol, si, sj, sk, scratch) > \
                       (w, vol, si, sj, sk, scratch) \
\
sa%saViscous(w, vol, si, sj, sk, rlv, scratch) > \
            (w, vol, si, sj, sk, rlv, scratch) \
\
sa%saResScale(scratch, dw) > \
             (dw) \
\
residuals%sourceTerms_block(w, pref, uref, plocal, dw, actuatorRegions%F) > \
                           (w, pref, uref, plocal, dw, actuatorRegions%F) \
\
fluxes%inviscidCentralFlux(w, timeRef, vol, si, sj, sk, p, dw) > \
                          (w, timeRef, vol, si, sj, sk, p, dw) \
\
fluxes%inviscidDissFluxScalar(w, pInfCorr, rhoInf, p, radi, radj, radk, fw) > \
                             (w, pInfCOrr, rhoInf, p, fw) \
\
fluxes%inviscidDissFluxMatrix(w, pInfCorr, si, sj, sk, p, fw) > \
                             (w, pInfCorr, si, sj, sk, p, fw) \
\
fluxes%inviscidDissFluxScalarApprox(w, p, radi, radj, radk, fw) > \
                                   (w, p, fw) \
\
fluxes%inviscidDissFluxMatrixApprox(w, p, fw) > \
                                   (w, p, fw) \
\
fluxes%inviscidUpwindFlux(w, si, sj, sk, p, fw) > \
                         (w, si, sj, sk, p, fw) \
\
flowUtils%computeSpeedOfSoundSquared(w, p) > \
                                    (w, p, aa) \
\
flowUtils%allNodalGradients(w, vol, si, sj, sk, aa) > \
                           (w, vol, si, sj, sk, aa, ux, uy, uz, vx, vy, vz, wx, wy, wz, qx, qy, qz) \
\
fluxes%viscousFlux(w, x, si, sj, sk, rlv, rev, aa, ux, uy, uz, vx, vy, vz, wx, wy, wz, qx, qy, qz, fw) > \
                  (w, x, si, sj, sk, fw, viscsubface%tau) \
\
fluxes%viscousFluxApprox(w, x, rlv, rev, aa, fw) > \
                        (w, x, fw) \
\
adjointExtra%sumDwandFw(fw, dw) > (dw) \
\
adjointExtra%resScale(dw) > (dw) \
\
surfaceIntegrations%wallIntegrationFace(Pinf, Pref, ww2, pp1, pp2, xx, ssi, velDirFreeStream, pointRef, machCoef, viscSubface%tau, localValues, BCData%Fp, bcData%Fv, BCData%area, localValues) > \
                                       (Pinf, Pref, ww2, pp1, pp2, xx, ssi, velDirFreeStream, pointRef, machCoef, viscSubface%tau, localValues, BCdata%Fp, bcData%Fv, BCData%area, localValues)\
\
surfaceIntegrations%flowIntegrationFace(Pref, rhoRef, timeRef, TRef, rGas, ww1, ww2, pp1, pp2, xx, ssi, pointRef, localValues) > \
                                       (Pref, rhoRef, timeRef, TRef, rGas, ww1, ww2, pp1, pp2, xx, ssi, pointRef, localValues)\
\
zipperIntegrations%wallIntegrationZipper(vars, pointRef, localValues) > \
                                         (vars, pointRef, localValues)\
\
zipperIntegrations%flowIntegrationZipper(vars, Pref, rhoRef, timeRef, TRef, rGas, pointRef, localValues) > \
                                        (vars, Pref, rhoRef, timeRef, TRef, rGas, pointRef, localValues)\
\
surfaceIntegrations%getCostFunctions(globalVals, liftDirection, dragDirection, pRef, rhoRef, machCoef) > \
	                            (funcValues) \
\
oversetUtilities%newtonUpdate(xCen, blk, frac) > \
	               (blk, frac)\
oversetUtilities%fracToWeights(frac) > \
			      (weights) \
\
"

#applyLowSpeedPreconditioner(w, P, dw) > (w, dw, P) \

#================================================================
# ====================== State-only reverse routines ============

# Note that is is only a subset of the the full set because we don't
# don't have to redo the ones that don't have a spatial dependence
# anyway.

stateOnlyRoutines = "\
residuals%sourceTerms_block(w, dw) > \
                           (w, dw) \
\
fluxes%inviscidCentralFlux(w, p, dw) > \
                          (w, p, dw) \
\
fluxes%inviscidDissFluxScalar(p, w, radi, radj, radk, fw) > \
                             (p, w, fw) \
\
fluxes%inviscidDissFluxMatrix(p, w, fw) > \
                             (p, w, fw) \
\
fluxes%inviscidUpwindFlux(w, p, fw) > \
                         (w, p, fw) \
\
solverutils%timeStep_block(w, p) > \
                          (w, p, radi, radj, radk) \
\
fluxes%viscousFlux(w, aa, rlv, rev, ux, uy, uz, vx, vy, vz, wx, wy, wz, qx, qy, qz, fw) > \
                  (w, aa, fw) \
\
flowutils%allNodalGradients(aa, w) > \
                           (aa, w, ux, uy, uz, vx, vy, vz, wx, wy, wz, qx, qy, qz) \
\
sa%saSource(w, rlv) > \
           (w, rlv, scratch) \
\
sa%saViscous(w, rlv, scratch) > \
            (w, rlv, scratch) \
\
sa%saResScale(scratch) > (dw) \
\
turbutils%saEddyViscosity(w,rlv) > (w,rlv,rev) \
\
turbutils%turbAdvection(w,scratch)>(w,scratch)"

#================================================================

default: ad_forward ad_reverse ad_reverse_fast

ad_forward:
# First delete the holding directory if it exists
	rm -fr temp_forward

# Next create the holidng directory:
	mkdir -p temp_forward

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_forward

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade \
	-html \
	-head $(fullRoutines) \
	-forward \
	$(TAPENADE_PRECISION) \
	-tgtfuncname %_d \
	-O temp_forward \
	$(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditForward.py temp_forward outputForward

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

ad_reverse:
# First delete the holding directory if it exists
	rm -fr temp_reverse

# Next create the holidng directory:
	mkdir -p temp_reverse

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_reverse

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade \
	-html \
	-head $(fullRoutines) \
	-adjvarname %d \
	-adjfuncname %_b \
	-reverse \
	-msglevel 30 \
	$(TAPENADE_PRECISION) \
	-noisize \
	-O temp_reverse  \
	$(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditReverse.py temp_reverse outputReverse

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

ad_reverse_fast:
# First delete the holding directory if it exists
	rm -fr temp_reverse_fast

# Next create the holidng directory:
	mkdir -p temp_reverse_fast

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_reverse

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade \
	-html \
	-head $(stateOnlyRoutines) \
	-adjvarname %d \
	-adjfuncname %_fast_b \
	-reverse $(TAPENADE_PRECISION) \
	-noisize \
	-O temp_reverse_fast \
	$(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditReverseFast.py temp_reverse_fast outputReverseFast

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

preprocess_forward:
	@echo "Preprocessing all input files for forward mode AD..."
	@for file in $(ALL_RES_FILES); do \
		echo Preprocessing $$file; \
		cpp -DUSE_TAPENADE -DTAPENADE_FORWARD -traditional -P  $$file $$file.f90; \
	done

preprocess_reverse:
	@echo "Preprocessing all input files for reverse mode AD..."
	@for file in $(ALL_RES_FILES); do \
		echo Preprocessing $$file; \
		cpp -DUSE_TAPENADE -DTAPENADE_REVERSE -traditional -P $$file $$file.f90; \
	done

cleanpreprocess_res:
	@echo "Cleaning up residual preprocessed files..."
	@for file in $(ALL_RES_FILES); do \
		rm $$file.f90; \
	done

all:	 default

