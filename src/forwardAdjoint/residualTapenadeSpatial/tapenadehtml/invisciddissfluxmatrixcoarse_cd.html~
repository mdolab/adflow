<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><a name="invisciddissfluxmatrixcoarse_cd"></a><a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!        Generated by TAPENADE     (INRIA, Tropics team)</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!  Tapenade 3.4 (r3375) - 10 Feb 2010 15:08</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * File:          inviscidDissFluxMatrixCoarse.f90                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Author:        Edwin van der Weide                             *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Starting date: 03-25-2003                                      *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Last modified: 08-25-2005                                      *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">SUBROUTINE </code><code class="funcname">INVISCIDDISSFLUXMATRIXCOARSE_CD</code>()</a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">INPUTPHYSICS_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">ITERATION_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">INPUTDISCRETIZATION_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">CONSTANTS_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">BLOCKPOINTERS_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">USE </code><code class="funcname">FLOWVARREFSTATE_SPATIAL_D</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IMPLICIT NONE</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * inviscidDissFluxMatrixCoarse computes the matrix artificial    *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * dissipation term. Instead of the spectral radius, as used in   *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * the scalar dissipation scheme, the absolute value of the flux  *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * jacobian is used. This routine is used on the coarser grids in *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * the multigrid cycle and only computes the first order          *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * dissipation term. It is assumed that the pointers in           *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * blockPointers already point to the correct block.              *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      Local parameters.</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">PARAMETER </code>:: <code class="vardecl">epsacoustic</code>=<code class="constant">0.25_realType</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">PARAMETER </code>:: <code class="vardecl">epsshear</code>=<code class="constant">0.025_realType</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      Local variables.</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">i</code>, <code class="vardecl">j</code>, <code class="vardecl">k</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">sfil</code>, <code class="vardecl">fis0</code>, <code class="vardecl">dis0</code>, <code class="vardecl">ppor</code>, <code class="vardecl">rrad</code>, <code class="vardecl">sface</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">gammaavg</code>, <code class="vardecl">gm1</code>, <code class="vardecl">ovgm1</code>, <code class="vardecl">gm53</code>, <code class="vardecl">tmp</code>, <code class="vardecl">fs</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">dr</code>, <code class="vardecl">dru</code>, <code class="vardecl">drv</code>, <code class="vardecl">drw</code>, <code class="vardecl">dre</code>, <code class="vardecl">drk</code>, <code class="vardecl">sx</code>, <code class="vardecl">sy</code>, <code class="vardecl">sz</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">uavg</code>, <code class="vardecl">vavg</code>, <code class="vardecl">wavg</code>, <code class="vardecl">a2avg</code>, <code class="vardecl">aavg</code>, <code class="vardecl">havg</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">alphaavg</code>, <code class="vardecl">unavg</code>, <code class="vardecl">ovaavg</code>, <code class="vardecl">ova2avg</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">kavg</code>, <code class="vardecl">lam1</code>, <code class="vardecl">lam2</code>, <code class="vardecl">lam3</code>, <code class="vardecl">area</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">abv1</code>, <code class="vardecl">abv2</code>, <code class="vardecl">abv3</code>, <code class="vardecl">abv4</code>, <code class="vardecl">abv5</code>, <code class="vardecl">abv6</code>, <code class="vardecl">abv7</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">correctfork</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">arg1</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">INTRINSIC </code><code class="funcname">MAX</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">INTRINSIC </code><code class="funcname">ABS</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">INTRINSIC </code><code class="funcname">SQRT</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="modifier">realType</code><code class="typename">) </code>:: <code class="vardecl">max3</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="modifier">realType</code><code class="typename">) </code>:: <code class="vardecl">max2</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="typename">REAL(</code><code class="modifier">realType</code><code class="typename">) </code>:: <code class="vardecl">max1</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Begin execution                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a name="p11"></a><a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Check if rFil == 0. If so, the dissipative flux needs not to</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! be computed.</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (</a><a href="msg.html#p11" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">rfil .EQ. zero) <code class="keyword">THEN</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">RETURN</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Determine whether or not the total energy must be corrected</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! for the presence of the turbulent kinetic energy.</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (kpresent) <code class="keyword">THEN</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (currentlevel .EQ. groundlevel .OR. turbcoupled) <code class="keyword">THEN</code></a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">correctfork = <code class="constant">.true.</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">correctfork = <code class="constant">.false.</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">correctfork = <code class="constant">.false.</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Initialize sface to zero. This value will be used if the</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! block is not moving.</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sface = zero</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Set a couple of constants for the scheme.</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fis0 = rfil*vis2coarse</a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sfil = one - rfil</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Initialize the dissipative residual to a certain times,</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! possibly zero, the previously stored value. Owned cells</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! only, because the halo values do not matter.</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>k=<code class="constant">2</code>,kl</a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>j=<code class="constant">2</code>,jl</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>i=<code class="constant">2</code>,il</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irho) = sfil*fw(i, j, k, irho)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imx) = sfil*fw(i, j, k, imx)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imy) = sfil*fw(i, j, k, imy)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imz) = sfil*fw(i, j, k, imz)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irhoe) = sfil*fw(i, j, k, irhoe)</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Dissipative fluxes in the i-direction.                         *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>k=<code class="constant">2</code>,kl</a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>j=<code class="constant">2</code>,jl</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>i=<code class="constant">1</code>,il</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the dissipation coefficient for this face.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ppor = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (pori(i, j, k) .EQ. normalflux) ppor = one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dis0 = fis0*ppor</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Construct the vector of the first differences multiplied</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! by dis0.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dr = dis0*(w(i+<code class="constant">1</code>, j, k, irho)-w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dru = dis0*(w(i+<code class="constant">1</code>, j, k, irho)*w(i+<code class="constant">1</code>, j, k, ivx)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drv = dis0*(w(i+<code class="constant">1</code>, j, k, irho)*w(i+<code class="constant">1</code>, j, k, ivy)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drw = dis0*(w(i+<code class="constant">1</code>, j, k, irho)*w(i+<code class="constant">1</code>, j, k, ivz)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dre = dis0*(w(i+<code class="constant">1</code>, j, k, irhoe)-w(i, j, k, irhoe))</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! In case a k-equation is present, compute the difference</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! of rhok and store the average value of k. If not present,</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! set both these values to zero, such that later on no</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! decision needs to be made anymore.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (correctfork) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = dis0*(w(i+<code class="constant">1</code>, j, k, irho)*w(i+<code class="constant">1</code>, j, k, itu1)-w(i, j, k<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&              </code>, irho)*w(i, j, k, itu1))</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = half*(w(i+<code class="constant">1</code>, j, k, itu1)+w(i, j, k, itu1))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = zero</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average value of gamma and compute some</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! expressions in which it occurs.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gammaavg = half*(gamma(i+<code class="constant">1</code>, j, k)+gamma(i, j, k))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm1 = gammaavg - one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovgm1 = one/gm1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm53 = gammaavg - five*third</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average state at the interface.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">uavg = half*(w(i+<code class="constant">1</code>, j, k, ivx)+w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">vavg = half*(w(i+<code class="constant">1</code>, j, k, ivy)+w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">wavg = half*(w(i+<code class="constant">1</code>, j, k, ivz)+w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">a2avg = half*(gamma(i+<code class="constant">1</code>, j, k)*p(i+<code class="constant">1</code>, j, k)/w(i+<code class="constant">1</code>, j, k, irho)<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>+gamma(i, j, k)*p(i, j, k)/w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = si(i, j, k, <code class="constant">1</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = si(i, j, k, <code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = si(i, j, k, <code class="constant">3</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">arg1 = sx**<code class="constant">2 </code>+ sy**<code class="constant">2 </code>+ sz**<code class="constant">2</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">area = <code class="funcname">SQRT</code>(arg1)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (<code class="constant">1.e-25_realType </code>.LT. area) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max1 = area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max1 = <code class="constant">1.e-25_realType</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">tmp = one/max1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = sx*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = sy*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = sz*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">alphaavg = half*(uavg**<code class="constant">2</code>+vavg**<code class="constant">2</code>+wavg**<code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">havg = alphaavg + ovgm1*(a2avg-gm53*kavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">aavg = <code class="funcname">SQRT</code>(a2avg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">unavg = uavg*sx + vavg*sy + wavg*sz</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovaavg = one/aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ova2avg = one/a2avg</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! The mesh velocity if the face is moving. It must be</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! divided by the area to obtain a true velocity.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (addgridvelocities) sface = sfacei(i, j, k)*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface + aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = unavg - sface + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = -(unavg-sface+aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface - aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = unavg - sface - aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = -(unavg-sface-aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = unavg - sface</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = -(unavg-sface)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">rrad = lam3 + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam1 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam2 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam3 .LT. epsshear*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = epsshear*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Multiply the eigenvalues by the area to obtain</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! the correct values for the dissipation term.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3*area</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Some abbreviations, which occur quite often in the</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! dissipation terms.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv1 = half*(lam1+lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv2 = half*(lam1-lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv3 = abv1 - lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv4 = gm1*(alphaavg*dr-uavg*dru-vavg*drv-wavg*drw+dre) - gm53<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>*drk</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv5 = sx*dru + sy*drv + sz*drw - unavg*dr</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv6 = abv3*abv4*ova2avg + abv2*abv5*ovaavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv7 = abv2*abv4*ovaavg + abv3*abv5</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute and scatter the dissipative flux.</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Density.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dr + abv6</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i+<code class="constant">1</code>, j, k, irho) = fw(i+<code class="constant">1</code>, j, k, irho) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irho) = fw(i, j, k, irho) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! X-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dru + uavg*abv6 + sx*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i+<code class="constant">1</code>, j, k, imx) = fw(i+<code class="constant">1</code>, j, k, imx) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imx) = fw(i, j, k, imx) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Y-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drv + vavg*abv6 + sy*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i+<code class="constant">1</code>, j, k, imy) = fw(i+<code class="constant">1</code>, j, k, imy) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imy) = fw(i, j, k, imy) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Z-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drw + wavg*abv6 + sz*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i+<code class="constant">1</code>, j, k, imz) = fw(i+<code class="constant">1</code>, j, k, imz) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imz) = fw(i, j, k, imz) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Energy.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dre + havg*abv6 + unavg*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i+<code class="constant">1</code>, j, k, irhoe) = fw(i+<code class="constant">1</code>, j, k, irhoe) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irhoe) = fw(i, j, k, irhoe) - fs</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Dissipative fluxes in the j-direction.                         *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>k=<code class="constant">2</code>,kl</a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>j=<code class="constant">1</code>,jl</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>i=<code class="constant">2</code>,il</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the dissipation coefficient for this face.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ppor = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (porj(i, j, k) .EQ. normalflux) ppor = one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dis0 = fis0*ppor</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Construct the vector of the first differences multiplied</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! by dis0.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dr = dis0*(w(i, j+<code class="constant">1</code>, k, irho)-w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dru = dis0*(w(i, j+<code class="constant">1</code>, k, irho)*w(i, j+<code class="constant">1</code>, k, ivx)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drv = dis0*(w(i, j+<code class="constant">1</code>, k, irho)*w(i, j+<code class="constant">1</code>, k, ivy)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drw = dis0*(w(i, j+<code class="constant">1</code>, k, irho)*w(i, j+<code class="constant">1</code>, k, ivz)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dre = dis0*(w(i, j+<code class="constant">1</code>, k, irhoe)-w(i, j, k, irhoe))</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! In case a k-equation is present, compute the difference</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! of rhok and store the average value of k. If not present,</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! set both these values to zero, such that later on no</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! decision needs to be made anymore.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (correctfork) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = dis0*(w(i, j+<code class="constant">1</code>, k, irho)*w(i, j+<code class="constant">1</code>, k, itu1)-w(i, j, k<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&              </code>, irho)*w(i, j, k, itu1))</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = half*(w(i, j+<code class="constant">1</code>, k, itu1)+w(i, j, k, itu1))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = zero</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average value of gamma and compute some</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! expressions in which it occurs.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gammaavg = half*(gamma(i, j+<code class="constant">1</code>, k)+gamma(i, j, k))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm1 = gammaavg - one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovgm1 = one/gm1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm53 = gammaavg - five*third</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average state at the interface.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">uavg = half*(w(i, j+<code class="constant">1</code>, k, ivx)+w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">vavg = half*(w(i, j+<code class="constant">1</code>, k, ivy)+w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">wavg = half*(w(i, j+<code class="constant">1</code>, k, ivz)+w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">a2avg = half*(gamma(i, j+<code class="constant">1</code>, k)*p(i, j+<code class="constant">1</code>, k)/w(i, j+<code class="constant">1</code>, k, irho)<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>+gamma(i, j, k)*p(i, j, k)/w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = sj(i, j, k, <code class="constant">1</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = sj(i, j, k, <code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = sj(i, j, k, <code class="constant">3</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">arg1 = sx**<code class="constant">2 </code>+ sy**<code class="constant">2 </code>+ sz**<code class="constant">2</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">area = <code class="funcname">SQRT</code>(arg1)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (<code class="constant">1.e-25_realType </code>.LT. area) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max2 = area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max2 = <code class="constant">1.e-25_realType</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">tmp = one/max2</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = sx*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = sy*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = sz*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">alphaavg = half*(uavg**<code class="constant">2</code>+vavg**<code class="constant">2</code>+wavg**<code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">havg = alphaavg + ovgm1*(a2avg-gm53*kavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">aavg = <code class="funcname">SQRT</code>(a2avg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">unavg = uavg*sx + vavg*sy + wavg*sz</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovaavg = one/aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ova2avg = one/a2avg</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! The mesh velocity if the face is moving. It must be</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! divided by the area to obtain a true velocity.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (addgridvelocities) sface = sfacej(i, j, k)*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface + aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = unavg - sface + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = -(unavg-sface+aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface - aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = unavg - sface - aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = -(unavg-sface-aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = unavg - sface</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = -(unavg-sface)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">rrad = lam3 + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam1 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam2 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam3 .LT. epsshear*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = epsshear*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Multiply the eigenvalues by the area to obtain</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! the correct values for the dissipation term.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3*area</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Some abbreviations, which occur quite often in the</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! dissipation terms.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv1 = half*(lam1+lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv2 = half*(lam1-lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv3 = abv1 - lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv4 = gm1*(alphaavg*dr-uavg*dru-vavg*drv-wavg*drw+dre) - gm53<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>*drk</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv5 = sx*dru + sy*drv + sz*drw - unavg*dr</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv6 = abv3*abv4*ova2avg + abv2*abv5*ovaavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv7 = abv2*abv4*ovaavg + abv3*abv5</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute and scatter the dissipative flux.</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Density.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dr + abv6</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j+<code class="constant">1</code>, k, irho) = fw(i, j+<code class="constant">1</code>, k, irho) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irho) = fw(i, j, k, irho) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! X-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dru + uavg*abv6 + sx*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j+<code class="constant">1</code>, k, imx) = fw(i, j+<code class="constant">1</code>, k, imx) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imx) = fw(i, j, k, imx) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Y-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drv + vavg*abv6 + sy*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j+<code class="constant">1</code>, k, imy) = fw(i, j+<code class="constant">1</code>, k, imy) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imy) = fw(i, j, k, imy) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Z-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drw + wavg*abv6 + sz*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j+<code class="constant">1</code>, k, imz) = fw(i, j+<code class="constant">1</code>, k, imz) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imz) = fw(i, j, k, imz) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Energy.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dre + havg*abv6 + unavg*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j+<code class="constant">1</code>, k, irhoe) = fw(i, j+<code class="constant">1</code>, k, irhoe) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irhoe) = fw(i, j, k, irhoe) - fs</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      * Dissipative fluxes in the k-direction.                         *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">!</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>k=<code class="constant">1</code>,kl</a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>j=<code class="constant">2</code>,jl</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">DO </code>i=<code class="constant">2</code>,il</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the dissipation coefficient for this face.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ppor = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (pork(i, j, k) .EQ. normalflux) ppor = one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dis0 = fis0*ppor</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Construct the vector of the first differences multiplied</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! by dis0.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dr = dis0*(w(i, j, k+<code class="constant">1</code>, irho)-w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dru = dis0*(w(i, j, k+<code class="constant">1</code>, irho)*w(i, j, k+<code class="constant">1</code>, ivx)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drv = dis0*(w(i, j, k+<code class="constant">1</code>, irho)*w(i, j, k+<code class="constant">1</code>, ivy)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drw = dis0*(w(i, j, k+<code class="constant">1</code>, irho)*w(i, j, k+<code class="constant">1</code>, ivz)-w(i, j, k, <code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>irho)*w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">dre = dis0*(w(i, j, k+<code class="constant">1</code>, irhoe)-w(i, j, k, irhoe))</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! In case a k-equation is present, compute the difference</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! of rhok and store the average value of k. If not present,</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! set both these values to zero, such that later on no</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! decision needs to be made anymore.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (correctfork) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = dis0*(w(i, j, k+<code class="constant">1</code>, irho)*w(i, j, k+<code class="constant">1</code>, itu1)-w(i, j, k<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&              </code>, irho)*w(i, j, k, itu1))</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = half*(w(i, j, k+<code class="constant">1</code>, itu1)+w(i, j, k, itu1))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">drk = zero</a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">kavg = zero</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average value of gamma and compute some</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! expressions in which it occurs.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gammaavg = half*(gamma(i, j, k+<code class="constant">1</code>)+gamma(i, j, k))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm1 = gammaavg - one</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovgm1 = one/gm1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">gm53 = gammaavg - five*third</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute the average state at the interface.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">uavg = half*(w(i, j, k+<code class="constant">1</code>, ivx)+w(i, j, k, ivx))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">vavg = half*(w(i, j, k+<code class="constant">1</code>, ivy)+w(i, j, k, ivy))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">wavg = half*(w(i, j, k+<code class="constant">1</code>, ivz)+w(i, j, k, ivz))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">a2avg = half*(gamma(i, j, k+<code class="constant">1</code>)*p(i, j, k+<code class="constant">1</code>)/w(i, j, k+<code class="constant">1</code>, irho)<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>+gamma(i, j, k)*p(i, j, k)/w(i, j, k, irho))</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = sk(i, j, k, <code class="constant">1</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = sk(i, j, k, <code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = sk(i, j, k, <code class="constant">3</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">arg1 = sx**<code class="constant">2 </code>+ sy**<code class="constant">2 </code>+ sz**<code class="constant">2</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">area = <code class="funcname">SQRT</code>(arg1)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (<code class="constant">1.e-25_realType </code>.LT. area) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max3 = area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">max3 = <code class="constant">1.e-25_realType</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">tmp = one/max3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sx = sx*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sy = sy*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">sz = sz*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">alphaavg = half*(uavg**<code class="constant">2</code>+vavg**<code class="constant">2</code>+wavg**<code class="constant">2</code>)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">havg = alphaavg + ovgm1*(a2avg-gm53*kavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">aavg = <code class="funcname">SQRT</code>(a2avg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">unavg = uavg*sx + vavg*sy + wavg*sz</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ovaavg = one/aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">ova2avg = one/a2avg</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! The mesh velocity if the face is moving. It must be</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! divided by the area to obtain a true velocity.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (addgridvelocities) sface = sfacek(i, j, k)*tmp</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface + aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = unavg - sface + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = -(unavg-sface+aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface - aavg .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = unavg - sface - aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = -(unavg-sface-aavg)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (unavg - sface .GE. <code class="constant">0.</code>) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = unavg - sface</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = -(unavg-sface)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">rrad = lam3 + aavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam1 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam2 .LT. epsacoustic*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = epsacoustic*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">IF</code> (lam3 .LT. epsshear*rrad) <code class="keyword">THEN</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = epsshear*rrad</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Multiply the eigenvalues by the area to obtain</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! the correct values for the dissipation term.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam1 = lam1*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam2 = lam2*area</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">lam3 = lam3*area</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Some abbreviations, which occur quite often in the</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! dissipation terms.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv1 = half*(lam1+lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv2 = half*(lam1-lam2)</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv3 = abv1 - lam3</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv4 = gm1*(alphaavg*dr-uavg*dru-vavg*drv-wavg*drw+dre) - gm53<code class="label">&</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="label">&            </code>*drk</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv5 = sx*dru + sy*drv + sz*drw - unavg*dr</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv6 = abv3*abv4*ova2avg + abv2*abv5*ovaavg</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">abv7 = abv2*abv4*ovaavg + abv3*abv5</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Compute and scatter the dissipative flux.</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Density.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dr + abv6</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k+<code class="constant">1</code>, irho) = fw(i, j, k+<code class="constant">1</code>, irho) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irho) = fw(i, j, k, irho) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! X-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dru + uavg*abv6 + sx*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k+<code class="constant">1</code>, imx) = fw(i, j, k+<code class="constant">1</code>, imx) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imx) = fw(i, j, k, imx) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Y-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drv + vavg*abv6 + sy*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k+<code class="constant">1</code>, imy) = fw(i, j, k+<code class="constant">1</code>, imy) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imy) = fw(i, j, k, imy) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Z-momentum.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*drw + wavg*abv6 + sz*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k+<code class="constant">1</code>, imz) = fw(i, j, k+<code class="constant">1</code>, imz) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, imz) = fw(i, j, k, imz) - fs</a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="comment">! Energy.</code></a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fs = lam3*dre + havg*abv6 + unavg*abv7</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k+<code class="constant">1</code>, irhoe) = fw(i, j, k+<code class="constant">1</code>, irhoe) + fs</a>
          <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile">fw(i, j, k, irhoe) = fw(i, j, k, irhoe) - fs</a>
        <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
      <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
    <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END DO</code></a>
  <a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END IF</code></a>
<a href="invisciddissfluxmatrixcoarse_p.html#invisciddissfluxmatrixcoarse" target="origFile"><code class="keyword">END SUBROUTINE </code><code class="funcname">INVISCIDDISSFLUXMATRIXCOARSE_CD</code></a>
</pre>
</body>
