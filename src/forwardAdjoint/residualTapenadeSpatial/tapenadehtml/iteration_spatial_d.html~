<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><a name="iteration_spatial_d"></a><a href="iteration_p.html#iteration" target="origFile"><code class="comment">!        Generated by TAPENADE     (INRIA, Tropics team)</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!  Tapenade 3.4 (r3375) - 10 Feb 2010 15:08</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * File:          iteration.f90                                   *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * Author:        Edwin van der Weide                             *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * Starting date: 03-13-2003                                      *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * Last modified: 09-20-2007                                      *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="keyword">MODULE </code><code class="funcname">ITERATION_SPATIAL_D</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="keyword">USE </code><code class="funcname">PRECISION_SPATIAL_D</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="keyword">IMPLICIT NONE</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * This module contains the iteration parameters mainly used in   *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      * solver.                                                        *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! groundLevel:  Current ground level of the computation. Needed</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!               to determine what kind of action must be</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!               undertaken. E.G. On the coarse grids no solution</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!               will be written.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! currentLevel: MG level at which the compution currently resides.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! rkStage:      Current runge kutta stage. Needed to determine</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!               whether or not the artificial dissipation terms</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!               must be computed.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">groundlevel</code>, <code class="vardecl">currentlevel</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">rkstage</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nStepsCycling: Number of steps in the current cycling strategy</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! cycling:       The corresponding array defining the multigrid</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                cycling strategy.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">nstepscycling</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:<code class="typename">)</code>, <code class="typename">ALLOCATABLE </code>:: <code class="vardecl">cycling</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nMGVar: Number of variables to which the multigrid must be</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         applied. For the Euler and laminar Navier-Stokes</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         equations this is the number of flow variables; for</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         RANS this is either the total number of independent</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         variables (coupled solver) or the number of flow</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         variables (segregated solver).</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nt1MG:  Starting index for the turbulent variables in MG.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nt2MG:  Ending index for the turbulent variables in MG.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         For a segregated solver these values are such</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!         that nothing is done on the turbulent equations.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">nmgvar</code>, <code class="vardecl">nt1mg</code>, <code class="vardecl">nt2mg</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! restrictEddyVis: Whether or not the eddy viscosity must</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  be restricted to the coarser levels.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! turbSegregated:  Whether or not the turbulent equations</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  are solved segregatedly from the mean</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  flow equations.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! turbCoupled:     Whether or not the turbulent equations are</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  solved in a coupled manner with the mean</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  flow equations. The reason why both</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  turbCoupled and turbSegregated are used is</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  that everything must work for Euler and</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                  laminar NS as well.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">restricteddyvis</code>, <code class="vardecl">turbsegregated</code>, <code class="vardecl">turbcoupled</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! iterTot: Total number of iterations on the current grid;</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!          a restart is not included in this count.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">itertot</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! rFil : coefficient to control the fraction of the dissipation</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!        residual of the previous runge-kutta stage.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">rfil</code>, <code class="vardecl">rfilb</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! t0Solver: Reference time for the solver.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">t0solver</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! converged:             Whether or not the solution has been</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        converged.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! exchangePressureEarly: Whether or not the pressure must be</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        exchanged early, i.e. before the</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        boundary conditions are applied.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        This must be done for a correct treatment</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        of normal momentum boundary condition,</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        but it requires an extra call to the</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                        halo routines.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">converged</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">exchangepressureearly</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! standAloneMode:   Whether or not an executable in stand alone</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   mode is built.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! changing_Grid:    Whether or not the grid changes in time.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   In stand alone mode this only happens when</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   moving parts are present. In a</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   multi-disciplinary environment more options</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   are possible, i.e. deforming meshes.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! deforming_Grid:   Whether or not the grid deforms; this can</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   only happen for a multi-disciplinary,</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   usually aero-elastic problem.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! changingOverset:  Whether or not the overset connectivity needs</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   to be updated at each time step, due to </code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   moving or deforming grids.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! PV3Initialized:   Whether or not PV3 has been initialized,</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   for use in multidisciplinary problems where</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   solver is called multiple times</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">standalonemode</code>, <code class="vardecl">changing_grid</code>, <code class="vardecl">deforming_grid</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">changingoverset</code>, <code class="vardecl">pv3initialized</code>=<code class="constant">.false.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nOldSolAvail:     Number of available old solutions for</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   the time integration.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! nOldLevels:       Number of old levels needed in the time</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   integration scheme.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! coefTime(0:nOld): The coefficients in the time integrator</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                   for unsteady applications.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">noldsolavail</code>, <code class="vardecl">noldlevels</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:<code class="typename">)</code>, <code class="typename">ALLOCATABLE </code>:: <code class="vardecl">coeftime</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! timeSpectralGridsNotWritten: Whether or not grid files have</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              already been written in time</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              spectral mode. In this way</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              it is avoided that files are</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              written multiple times.</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">! oldSolWritten(nOldLevels-1): Logicals to indicate whether</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              or not old solution levels</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              have been written in</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="comment">!                              unsteady mode.</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">timespectralgridsnotwritten</code></a>
  <a href="iteration_p.html#iteration" target="origFile"><code class="typename">LOGICAL</code>, <code class="typename">DIMENSION(</code>:<code class="typename">)</code>, <code class="typename">ALLOCATABLE </code>:: <code class="vardecl">oldsolwritten</code></a>
<a href="iteration_p.html#iteration" target="origFile"><code class="keyword">END MODULE </code><code class="funcname">ITERATION_SPATIAL_D</code></a>
</pre>
</body>
