<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><a name="bcnswalladiabatic_cd"></a><a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!        Generated by TAPENADE     (INRIA, Tropics team)</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!  Tapenade 3.4 (r3375) - 10 Feb 2010 15:08</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * File:          bcNsWallAdiabatic.f90                           *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * Author:        Edwin van der Weide                             *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * Starting date: 03-10-2003                                      *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * Last modified: 06-12-2005                                      *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">SUBROUTINE </code><code class="funcname">BCNSWALLADIABATIC_CD</code>(<code class="vardecl">secondhalo</code>, <code class="vardecl">correctfork</code>)</a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">USE </code><code class="funcname">BCTYPES_SPATIAL_D</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">USE </code><code class="funcname">ITERATION_SPATIAL_D</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">USE </code><code class="funcname">CONSTANTS_SPATIAL_D</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">USE </code><code class="funcname">BLOCKPOINTERS_SPATIAL_D</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">USE </code><code class="funcname">FLOWVARREFSTATE_SPATIAL_D</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IMPLICIT NONE</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * bcNSWallAdiabatic applies the viscous adiabatic wall           *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * boundary condition to a block. It is assumed that the pointers *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * in blockPointers are already set to the correct block on the   *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * correct grid level.                                            *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      Subroutine arguments.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">LOGICAL</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">secondhalo</code>, <code class="vardecl">correctfork</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      Local variables.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">nn</code>, <code class="vardecl">i</code>, <code class="vardecl">j</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">rhok</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">uslip</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">ww1</code>, <code class="vardecl">ww2</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">pp1</code>, <code class="vardecl">pp2</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">rlv1</code>, <code class="vardecl">rlv2</code></a>
<a name="setbcpointers_cd2"></a>  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">rev1</code>, <code class="vardecl">rev2</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">INTERFACE </code></a>
      <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="keyword">SUBROUTINE </code><code class="funcname">SETBCPOINTERS_CD2</code>(<code class="vardecl">nn</code>, <code class="vardecl">ww1</code>, <code class="vardecl">ww2</code>, <code class="vardecl">pp1</code>, <code class="vardecl">pp2</code>, <code class="vardecl">rlv1</code>, <code class="vardecl">rlv2</code>, <code class="label">&</code></a>
<a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="label">&        </code><code class="vardecl">rev1</code>, <code class="vardecl">rev2</code>, <code class="vardecl">offset</code>)</a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="keyword">USE </code><code class="funcname">BLOCKPOINTERS_SPATIAL_D</code></a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">nn</code>, <code class="vardecl">offset</code></a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">ww1</code>, <code class="vardecl">ww2</code></a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">pp1</code>, <code class="vardecl">pp2</code></a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">rlv1</code>, <code class="vardecl">rlv2</code></a>
        <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>:, :<code class="typename">)</code>, <code class="typename">POINTER </code>:: <code class="vardecl">rev1</code>, <code class="vardecl">rev2</code></a>
      <a href="bcnswalladiabatic_p.html#setbcpointers" target="origFile"><code class="keyword">END SUBROUTINE </code><code class="funcname">SETBCPOINTERS_CD2</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END INTERFACE</code></a>

<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      * Begin execution                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! In case the turbulent transport equations are solved</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! together with the mean flow equations, aplly the viscous</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! wall boundary conditions for the turbulent variables.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! No need to extrapolate the secondary halo's, because this</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! is done in extrapolate2ndHalo.</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IF</code> (turbcoupled) <code class="keyword">CALL </code><code class="funcname">TURBBCNSWALL_CD</code>(<code class="constant">.false.</code>)</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Loop over the viscous subfaces of this block. Note that</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! these are numbered first.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="label">bocos:</code><code class="keyword">DO </code>nn=<code class="constant">1</code>,nviscbocos</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Check for adiabatic viscous wall boundary conditions.</code></a>
    <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IF</code> (bctype(nn) .EQ. nswalladiabatic) <code class="keyword">THEN</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Set the pointer for uSlip to make the code more readable.</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">uslip => bcdata(nn)%uslip</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Nullify the pointers and set them to the correct subface.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! They are nullified first, because some compilers require</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! that.</code></a>
<a name="p22"></a><a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">!nullify(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2)</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">CALL </code><code class="funcname">SETBCPOINTERS_CD2</code>(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, <code class="label">&</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="label">&                       </code>rev2, </a><a href="msg.html#p22" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="constant">0_intType</code>)</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Initialize rhok to zero. This will be overwritten if a</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! correction for k must be applied.</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">rhok = zero</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Loop over the generic subface to set the state in the</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! halo cells.</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">DO </code>j=bcdata(nn)%jcbeg,bcdata(nn)%jcend</a>
        <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">DO </code>i=bcdata(nn)%icbeg,bcdata(nn)%icend</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Set the value of rhok if a correcton must be applied.</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! It probably does not matter too much, because k is very</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! small near the wall.</code></a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IF</code> (correctfork) rhok = ww2(i, j, irho)*ww2(i, j, itu1)</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Determine the variables in the halo. As the spacing</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! is very small a constant pressure boundary condition</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! (except for the k correction) is okay. Take the slip</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! velocity into account.</code></a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">ww1(i, j, irho) = ww2(i, j, irho)</a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">ww1(i, j, ivx) = -ww2(i, j, ivx) + two*uslip(i, j, <code class="constant">1</code>)</a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">ww1(i, j, ivy) = -ww2(i, j, ivy) + two*uslip(i, j, <code class="constant">2</code>)</a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">ww1(i, j, ivz) = -ww2(i, j, ivz) + two*uslip(i, j, <code class="constant">3</code>)</a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">pp1(i, j) = pp2(i, j) - four*third*rhok</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Set the viscosities. There is no need to test for a</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! viscous problem of course. The eddy viscosity is</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! set to the negative value, as it should be zero on</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! the wall.</code></a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile">rlv1(i, j) = rlv2(i, j)</a>
          <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IF</code> (eddymodel) rev1(i, j) = -rev2(i, j)</a>
        <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END DO</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END DO</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Compute the energy for these halo's.</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">CALL </code><code class="funcname">COMPUTEETOT_CD</code>(icbeg(nn), icend(nn), jcbeg(nn), jcend(nn), <code class="label">&</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="label">&                    </code>kcbeg(nn), kcend(nn), correctfork)</a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! Extrapolate the state vectors in case a second halo</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="comment">! is needed.</code></a>
      <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">IF</code> (secondhalo) <code class="keyword">CALL </code><code class="funcname">EXTRAPOLATE2NDHALO_CD</code>(nn, correctfork)</a>
    <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END IF</code></a>
  <a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END DO </code><code class="label">bocos</code></a>
<a href="bcnswalladiabatic_p.html#bcnswalladiabatic" target="origFile"><code class="keyword">END SUBROUTINE </code><code class="funcname">BCNSWALLADIABATIC_CD</code></a>
</pre>
</body>
