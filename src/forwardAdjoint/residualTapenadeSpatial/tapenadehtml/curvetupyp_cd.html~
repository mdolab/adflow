<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><a name="curvetupyp_cd"></a><a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!        Generated by TAPENADE     (INRIA, Tropics team)</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!  Tapenade 3.4 (r3375) - 10 Feb 2010 15:08</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      ==================================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">SUBROUTINE </code><code class="funcname">CURVETUPYP_CD</code>(<code class="vardecl">tup</code>, <code class="vardecl">yp</code>, <code class="vardecl">ntu1</code>, <code class="vardecl">ntu2</code>)</a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">USE </code><code class="funcname">INPUTPHYSICS_SPATIAL_D</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">USE </code><code class="funcname">PARAMTURB_SPATIAL_D</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">USE </code><code class="funcname">CONSTANTS_SPATIAL_D</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IMPLICIT NONE</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      * CurveTupYp determines the value of the turbulent variables     *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      * ntu1 to ntu2 for the given yplus.                              *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      * This data has been curve fitted with cubic splines.            *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      Subroutine arguments.</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">ntu1</code>, <code class="vardecl">ntu2</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">yp</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">)</code>, <code class="typename">DIMENSION(</code>ntu1:ntu2<code class="typename">)</code>, <code class="typename">INTENT(OUT) </code>:: <code class="vardecl">tup</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      Local variables.</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">ii</code>, <code class="vardecl">nn</code>, <code class="vardecl">start</code>, <code class="vardecl">mm</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">x</code>, <code class="vardecl">x2</code>, <code class="vardecl">x3</code>, <code class="vardecl">epswall</code>, <code class="vardecl">fwall</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">INTRINSIC </code><code class="funcname">EXP</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">INTRINSIC </code><code class="funcname">MAX</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">max2</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="typename">REAL(</code><code class="keyword">kind</code>=<code class="modifier">realtype</code><code class="typename">) </code>:: <code class="vardecl">max1</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      * Begin execution                                                *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Determine the situation we are dealing with.</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (yp .LE. ypt(<code class="constant">0</code>)) <code class="keyword">THEN</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Yplus is less than the smallest number in the curve</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! fit. The treatment is turbulence model dependent.</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">SELECT CASE </code> (turbmodel) </a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(spalartallmaras, spalartallmarasedwards) </a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Transport variable is zero on the wall. Use linear</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! interpolation.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = yp/ypt(<code class="constant">0</code>)</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = x*tup0(<code class="constant">1</code>, mm)</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(komegawilcox, komegamodified, mentersst) </a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!=============================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Use the near wall expressions for k and omega.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = yp/ypt(<code class="constant">0</code>)</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">SELECT CASE </code> (mm) </a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu1) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))*x**<code class="constant">3.23_realType</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x**<code class="constant">3.23_realType</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu2) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (x .LT. eps) <code class="keyword">THEN</code></a>
              <a href="curvetupyp_p.html#curvetupyp" target="origFile">max1 = eps</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
              <a href="curvetupyp_p.html#curvetupyp" target="origFile">max1 = x</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))/max1**<code class="constant">2</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (x .LT. eps) <code class="keyword">THEN</code></a>
              <a href="curvetupyp_p.html#curvetupyp" target="origFile">max2 = eps</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
              <a href="curvetupyp_p.html#curvetupyp" target="origFile">max2 = x</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)/max2**<code class="constant">2</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END SELECT</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(ktau) </a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!=============================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Use the near wall expressions for k and tau.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = yp/ypt(<code class="constant">0</code>)</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">SELECT CASE </code> (mm) </a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu1) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))*x**<code class="constant">3.23_realType</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x**<code class="constant">3.23_realType</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu2) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))*x*x</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x*x</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END SELECT</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(v2f) </a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!=============================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Use the near wall expressions for k, epsilon, v2 and f.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = yp/ypt(<code class="constant">0</code>)</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">SELECT CASE </code> (mm) </a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu1) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))*x**<code class="constant">2</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x**<code class="constant">2</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu2) </a>
<a name="p2"></a><a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! epsilon cannot be fitted logarithmically.</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="msg.html#p2" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CALL </code><code class="funcname">TERMINATE_CD</code>(<code class="string">'curveTupYp'</code>, <code class="string">'Check curveFit, '</code>, <code class="label">&</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">&                        </code><code class="string">'epsilon cannot be fitted with log'</code>)</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">1</code>) epswall = <code class="constant">0.33_realType</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">6</code>) epswall = <code class="constant">0.27_realType</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = epswall + (tup0(<code class="constant">1</code>, mm)-epswall)*x</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu3) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup0(<code class="constant">1</code>, mm))*x**<code class="constant">4</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x**<code class="constant">4</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
<a name="p3"></a>        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu4) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">1</code>) </a><a href="msg.html#p3" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CALL </code><code class="funcname">TERMINATE_CD</code>(<code class="string">'curveTupYp'</code>, <code class="label">&</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">&                                         </code><code class="string">'Check curveFit, '</code>, <code class="label">&</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">&                                         </code><code class="string">'f cannot be fitted with log'</code>)</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">6</code>) tup(mm) = <code class="funcname">EXP</code>(tup(mm))*x</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">1</code>) fwall = -<code class="constant">0.0035_realType</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (rvfn .EQ. <code class="constant">6</code>) fwall = zero</a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = fwall + (tup0(<code class="constant">1</code>, mm)-fwall)*x</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">CASE </code>(itu5) </a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) <code class="keyword">THEN</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = <code class="funcname">EXP</code>(tup(mm))*x**<code class="constant">4</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
            <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(<code class="constant">1</code>, mm)*x**<code class="constant">4</code></a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END SELECT</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END SELECT</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE IF</code> (yp .GE. ypt(nfit)) <code class="keyword">THEN</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!=================================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Yplus is larger than the largest number in the curve</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! fit. Set tup to the largest value available.</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">nn = nfit</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = ypt(nn) - ypt(nn-<code class="constant">1</code>)</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">x2 = x*x</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">x3 = x*x2</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(nn, mm) + tup1(nn, mm)*x + tup2(nn, mm)*x2 + tup3(<code class="label">&</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">&        </code>nn, mm)*x3</a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) tup(mm) = <code class="funcname">EXP</code>(tup(mm))</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">!=================================================================</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! y-plus is in the range of the curve fits.</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! First find the correct interval.</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">ii = nfit</a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile">start = <code class="constant">1</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">interval:</code><code class="keyword">DO </code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Next guess for the interval.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">nn = start + ii/<code class="constant">2</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Determine the situation we are having here.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (yp .GT. ypt(nn)) <code class="keyword">THEN</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Yplus is larger than the upper boundary of</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! the current interval. Update the lower boundary.</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">start = nn + <code class="constant">1</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">ii = ii - <code class="constant">1</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">ELSE IF</code> (yp .GE. ypt(nn-<code class="constant">1</code>)) <code class="keyword">THEN</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Compute tup using the cubic polynomial for this interval.</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">x = yp - ypt(nn-<code class="constant">1</code>)</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">x2 = x*x</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile">x3 = x*x2</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">DO </code>mm=ntu1,ntu2</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile">tup(mm) = tup0(nn, mm) + tup1(nn, mm)*x + tup2(nn, mm)*x2 + <code class="label">&</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">&            </code>tup3(nn, mm)*x3</a>
          <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">IF</code> (tulogfit(mm)) tup(mm) = <code class="funcname">EXP</code>(tup(mm))</a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO</code></a>
        <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">GOTO </code><code class="label">100</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! This is the correct range. Exit the do-loop.</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="comment">! Modify ii for the next branch to search.</code></a>
      <a href="curvetupyp_p.html#curvetupyp" target="origFile">ii = ii/<code class="constant">2</code></a>
    <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END DO </code><code class="label">interval</code></a>
  <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END IF</code></a>
 <a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="label">100 </code><code class="keyword">CONTINUE</code></a>
<a href="curvetupyp_p.html#curvetupyp" target="origFile"><code class="keyword">END SUBROUTINE </code><code class="funcname">CURVETUPYP_CD</code></a>
</pre>
</body>
