<title>Generated by TAPENADE</title>
<link type="text/CSS" rel="stylesheet" href="tapenade.css">
<link type="text/CSS" rel="stylesheet" href="fortranStyle.css">
<body>
<pre><a name="applyallbc_block_cd"></a><a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!        Generated by TAPENADE     (INRIA, Tropics team)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!  Tapenade 3.4 (r3375) - 10 Feb 2010 15:08</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * File:          applyAllBC.f90                                  *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * Author:        Edwin van der Weide, Seonghyeon Hahn            *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * Starting date: 03-07-2003                                      *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * Last modified: 09-13-2007                                      *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">SUBROUTINE </code><code class="funcname">APPLYALLBC_BLOCK_CD</code>(<code class="vardecl">secondhalo</code>)</a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">USE </code><code class="funcname">ITERATION_SPATIAL_D</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">USE </code><code class="funcname">INPUTDISCRETIZATION_SPATIAL_D</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">USE </code><code class="funcname">INPUTTIMESPECTRAL_SPATIAL_D</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">USE </code><code class="funcname">BLOCKPOINTERS_SPATIAL_D</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">USE </code><code class="funcname">FLOWVARREFSTATE_SPATIAL_D</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">IMPLICIT NONE</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Domain-interface boundary conditions,</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! when coupled with other solvers.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcDomainInterface(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Supersonic inflow boundary conditions.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcSupersonicInflow(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * applyAllBC applies all boundary conditions for the all         *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * blocks on the grid level currentLevel.                         *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      Subroutine arguments.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="typename">LOGICAL</code>, <code class="typename">INTENT(IN) </code>:: <code class="vardecl">secondhalo</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      Local variables.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="typename">INTEGER(</code><code class="keyword">kind</code>=<code class="modifier">inttype</code><code class="typename">) </code>:: <code class="vardecl">nn</code>, <code class="vardecl">sps</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="typename">LOGICAL </code>:: <code class="vardecl">correctfork</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      * Begin execution                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      *                                                                *</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!      ******************************************************************</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! Determine whether or not the total energy must be corrected</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! for the presence of the turbulent kinetic energy.</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">IF</code> (kpresent) <code class="keyword">THEN</code></a>
    <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">IF</code> (currentlevel .LE. groundlevel .OR. turbcoupled) <code class="keyword">THEN</code></a>
      <a href="applyallbc_block_p.html#applyallbc_block" target="origFile">correctfork = <code class="constant">.true.</code></a>
    <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">ELSE</code></a>
      <a href="applyallbc_block_p.html#applyallbc_block" target="origFile">correctfork = <code class="constant">.false.</code></a>
    <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">END IF</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">ELSE</code></a>
    <a href="applyallbc_block_p.html#applyallbc_block" target="origFile">correctfork = <code class="constant">.false.</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">END IF</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! Apply all the boundary conditions. The order is important.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! The symmetry boundary conditions.</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">BCSYMM_CD</code>(secondhalo)</a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">BCSYMMPOLAR_CD</code>(secondhalo)</a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!call bcEulerWall(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! The viscous wall boundary conditions.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!call bcNSWallAdiabatic( secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!call bcNSWallIsothermal(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! The farfield is a special case, because the treatment</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! differs when preconditioning is used. Make that distinction</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! and call the appropriate routine.</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">SELECT CASE </code> (precond) </a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CASE </code>(noprecond) </a>
<a name="p4"></a>    <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">BCFARFIELD_CD</code>(secondhalo, correctfork)</a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CASE </code>(turkel) </a>
    <a href="msg.html#p4" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">TERMINATE_CD</code>(<code class="string">'applyAllBC'</code>, <code class="label">&</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="label">&                </code><code class="string">'Farfield boundary conditions for Turkel '</code>, <code class="label">&</code></a>
<a name="p5"></a><a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="label">&                </code><code class="string">'preconditioner not implemented'</code>)</a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CASE </code>(choimerkle) </a>
    <a href="msg.html#p5" target="msg"><code class="comment"><img src="danger.gif" align=middle border=0 alt="!" /></code></a><a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">TERMINATE_CD</code>(<code class="string">'applyAllBC'</code>, <code class="label">&</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="label">&                </code><code class="string">'Farfield boundary conditions for Choi and '</code>, <code class="label">&</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="label">&                </code><code class="string">'Merkle preconditioner not implemented'</code>)</a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">END SELECT</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Subsonic outflow and bleed outflow boundaries.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcSubsonicOutflow(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Subsonic inflow boundary.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcSubsonicInflow(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Bleed inflow regions.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcBleedInflow( secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Engine boundary conditions. Not implemented yet.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcMdot(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcThrust(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! Extrapolation boundary conditions; this also includes</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! the supersonic outflow boundary conditions. The difference</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! between the two is that the extrap boundary conditions</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! correspond to singular lines and supersonic outflow</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! boundaries to physical boundaries. The treatment however</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   ! is identical.</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">!   call bcExtrap(secondHalo, correctForK)</code></a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="comment">! Inviscid wall boundary conditions.</code></a>
  <a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">CALL </code><code class="funcname">BCEULERWALL_CD</code>(secondhalo, correctfork)</a>
<a href="applyallbc_block_p.html#applyallbc_block" target="origFile"><code class="keyword">END SUBROUTINE </code><code class="funcname">APPLYALLBC_BLOCK_CD</code></a>
</pre>
</body>
