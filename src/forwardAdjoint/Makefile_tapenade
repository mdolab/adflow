#     ******************************************************************
#     *                                                                *
#     * File:          Makefile_tapenade                               *
#     * Author:        Gaetan Kenway                                   *
#     * Starting date: 08-02-2006                                      *
#     * Last modified: 10-24-2014                                      *
#     *                                                                *
#     * This makefile is used to create automatically differentated    *
#     * residual code that can be used to constuct the aerodynamic     *
#     * jacobian. There are three main commands:                       *
#     *                                                                *
#     * ad_forward: Run in forward mode. Preprocessed output is in     *
#     *             'foward' directory                                 *
#     *                                                                *
#     * ad_multi: Run in foward multi-directional mode. Preprocessed   *
#     *           output is in the 'fowardMulti'directory              *
#     *                                                                *
#     * ad_reverse: Run in reverse mode. Preprocessed output is in the *
#     *             'reverse' directory                                *
#     *                                                                *
#     * The following are commands that are used to produce tangent/   *
#     * adjoint debug code.                                            *
#     *                                                                *
#     * ad_forward_debugTGT: Run in forward with debug commands        *
#     *                      for debugging the FORWARD mode code.      *
#     *                                                                *
#     * ad_forward_debugADJ: Run in forward with debug commands        *
#     *                      for debugging the REVERSE mode code.      *
#     *                                                                *
#     * ad_reverse_debugADJ: Run in reverse with debug commands        *
#     *                      for debugging the REVERSE mode code.      *
#     *                                                                *
#     *                                                                *
#     ******************************************************************

# Define the required directories
SUMB_DIR = ../..
SUMB_COMMON_FILE = $(SUMB_DIR)/SUmb_Common.mk
SRC = ..

# Integer, double and real precision (bytes)
TAPENADE_PRECISION = -i4 -dr8 -r8

# -------------------- Residual AD Info---------------------------------
# Dependent output variables (separator: white space, default: all)
TAPENADE_RES_OUTVARS = "flowdoms%dw  BCData%Fp BCData%Fv BCData%M  BCData%sepSensor BCData%Cavitation BCData%oArea flowdoms%w flowdoms%x force moment sepSensor Cavitation funcValues"

# Independent input variables (separator: white space, default: all)
TAPENADE_RES_VARS = "flowdoms%w flowdoms%x alpha beta mach machgrid machcoef pointref lengthRef Pref tempFreeStream"
#Reynolds ReynoldsLength

# Name of the top routine
TAPENADE_RES_HEADROUTINE = "block_res"

ALL_RES_FILES =	$(SRC)/forwardAdjoint/residualInput/block_res.F90\
		$(SRC)/forwardAdjoint/residualInput/xhalo_block.F90\
		$(SRC)/forwardAdjoint/residualInput/metric_block.F90\
		$(SRC)/forwardAdjoint/costInput/costFunction2.F90\
		$(SRC)/modules/monitor.f90\
		$(SRC)/modules/diffSizes.f90\
		$(SRC)/modules/block.F90\
		$(SRC)/modules/inputParam.F90\
		$(SRC)/modules/constants.F90 \
		$(SRC)/modules/precision_tapenade.f90\
		$(SRC)/modules/iteration.f90\
		$(SRC)/modules/section.f90\
		$(SRC)/modules/communication.f90\
		$(SRC)/modules/BCTypes.f90\
		$(SRC)/modules/paramTurb.F90\
		$(SRC)/modules/cgnsGrid.f90 \
		$(SRC)/modules/CpCurveFits.f90\
		$(SRC)/modules/blockPointers.F90 \
		$(SRC)/modules/flowVarRefState.F90 \
		$(SRC)/modules/costFunctions.F90\
		$(SRC)/solver/inviscidCentralFlux.F90\
		$(SRC)/solver/inviscidDissFluxCusp.f90\
		$(SRC)/solver/inviscidDissFluxCuspCoarse.f90\
		$(SRC)/solver/inviscidDissFluxMatrix.F90\
		$(SRC)/solver/inviscidDissFluxMatrixCoarse.f90\
		$(SRC)/solver/inviscidDissFluxScalar.F90\
		$(SRC)/solver/inviscidDissFluxScalarCoarse.f90\
		$(SRC)/solver/inviscidUpwindFlux.F90\
		$(SRC)/solver/computeUtau.f90\
		$(SRC)/solver/applyAllBC.F90\
		$(SRC)/solver/timeStep.f90\
		$(SRC)/solver/residual.F90\
		$(SRC)/solver/computeLamViscosity.f90\
		$(SRC)/solver/setCoefTimeIntegrator.f90\
		$(SRC)/solver/derivativeRotMatrixRigid.f90\
		$(SRC)/solver/adjustInflowAngle.f90\
		$(SRC)/solver/getDirVector.f90\
		$(SRC)/solver/getDirAngle.f90\
		$(SRC)/solver/vectorRotation.f90\
		$(SRC)/solver/bcEulerWall.F90\
		$(SRC)/solver/bcFarfield.F90\
		$(SRC)/solver/bcSymm.F90\
		$(SRC)/solver/bcNSWallAdiabatic.F90\
		$(SRC)/solver/bcNSWallIsothermal.F90\
		$(SRC)/solver/extrapolate2ndHalo.F90\
		$(SRC)/solver/slipVelocities.f90\
		$(SRC)/solver/viscousFlux.F90\
		$(SRC)/solver/utauWF.F90\
		$(SRC)/solver/gridVelocitiesFineLevel.F90\
		$(SRC)/solver/normalVelocities.F90\
		$(SRC)/solver/forcesAndMoments.F90\
		$(SRC)/stabilityDerivatives/computeTSDerivatives.f90\
		$(SRC)/stabilityDerivatives/computeLeastSquaresRegression.f90\
		$(SRC)/initFlow/referenceState.F90\
		$(SRC)/initFlow/setFlowInfinityState.F90\
		$(SRC)/turbulence/computeEddyViscosity.F90\
		$(SRC)/turbulence/curveFit.f90\
		$(SRC)/turbulence/turbBCNSWall.f90\
		$(SRC)/turbulence/turbMod.F90\
		$(SRC)/turbulence/saNuFromEddyRatio.f90\
		$(SRC)/turbulence/sa.F90\
		$(SRC)/turbulence/saSolve.F90\
		$(SRC)/turbulence/prodKatoLaunder.f90\
		$(SRC)/turbulence/prodSmag2.f90\
		$(SRC)/turbulence/prodWmag2.f90\
		$(SRC)/turbulence/turbAdvection.f90\
		$(SRC)/turbulence/unsteadyTurbTerm.f90\
		$(SRC)/turbulence/bcTurbSymm.f90\
		$(SRC)/turbulence/bcTurbWall.f90\
		$(SRC)/turbulence/bcTurbFarfield.f90\
		$(SRC)/turbulence/unsteadyTurbSpectral.f90\
		$(SRC)/turbulence/bcTurbTreatment.F90\
		$(SRC)/turbulence/applyAllTurbBC.f90\
		$(SRC)/turbulence/bcEddyWall.f90\
		$(SRC)/turbulence/bcEddyNoWall.f90\
		$(SRC)/turbulence/turb2ndHalo.f90\
		$(SRC)/utils/rotMatrixRigidBody.f90\
		$(SRC)/utils/computeGamma.f90\
		$(SRC)/utils/TSalpha.f90\
		$(SRC)/utils/TSalphadot.f90\
		$(SRC)/utils/TSBeta.f90\
		$(SRC)/utils/TSMach.f90\
		$(SRC)/utils/rigidRotAngle.f90\
		$(SRC)/utils/derivativeRigidRotAngle.f90\
		$(SRC)/utils/dummy_dim.f90\
		$(SRC)/utils/setBCPointers.F90\
		$(SRC)/utils/resetBCPointers.F90\
		$(SRC)/utils/setBCPointersBwd.F90\
		$(SRC)/utils/resetBCPointersBwd.F90\
		$(SRC)/utils/setpp3pp4.f90\
		$(SRC)/utils/setpp3pp4Bwd.f90\
		$(SRC)/utils/setss.f90\
		$(SRC)/utils/setssBwd.f90\
		$(SRC)/utils/setallx.f90\
		$(SRC)/utils/setallxBwd.f90\
		$(SRC)/utils/setssMetric.f90\
		$(SRC)/utils/setssMetricBwd.f90\
		$(SRC)/utils/resetpp3pp4.f90\
		$(SRC)/utils/resetpp3pp4Bwd.f90\
		$(SRC)/utils/setww0pp0rlv0rev0.f90\
		$(SRC)/utils/resetww0pp0rlv0rev0.f90\
		$(SRC)/utils/setww0pp0rlv0rev0Bwd.f90\
		$(SRC)/utils/resetww0pp0rlv0rev0Bwd.f90\
		$(SRC)/utils/setxxssrhodd2Wall.f90\
		$(SRC)/utils/resetxxssrhodd2Wall.f90\
		$(SRC)/utils/setxxssrhodd2WallBwd.f90\
		$(SRC)/utils/resetxxssrhodd2WallBwd.f90\
		$(SRC)/utils/resetss.f90\
		$(SRC)/utils/resetssBwd.f90\
		$(SRC)/utils/resetallx.f90\
		$(SRC)/utils/resetallxBwd.f90\
		$(SRC)/utils/resetssMetric.f90\
		$(SRC)/utils/resetssMetricBwd.f90\
		$(SRC)/utils/setgamma.f90\
		$(SRC)/utils/setgammaBwd.f90\
		$(SRC)/utils/resetgamma.f90\
		$(SRC)/utils/resetgammaBwd.f90\
		$(SRC)/utils/computeEtot.f90\
		$(SRC)/utils/setPointers.f90\
		$(SRC)/utils/terminate.F90\
		$(SRC)/bendingMomentAnalysis/rootBendingMomentAnalysis.f90

# intermediate residual files.
I_RES_FILES := $(ALL_RES_FILES:%=%.f90)
# ---------------------------------------------------------------------

# -------------------- CostFunction AD Info----------------------------
# Dependent output variables (separator: white space, default: all)
TAPENADE_COST_OUTVARS = "objValue"

# Independent input variables (separator: white space, default: all)
TAPENADE_COST_VARS = "force moment sepsensor Cavitation alpha beta  machgrid machcoef pointref lengthref pRef tempFreeStream"

# Name of the top routine
TAPENADE_COST_HEADROUTINE = "getCostFunction"

ALL_COST_FILES =$(SRC)/forwardAdjoint/costInput/costFunction.F90\
		$(SRC)/solver/adjustInflowAngle.f90\
		$(SRC)/stabilityDerivatives/computeTSDerivatives.f90\
		$(SRC)/stabilityDerivatives/computeLeastSquaresRegression.f90\
		$(SRC)/bendingMomentAnalysis/rootBendingMomentAnalysis.f90\
		$(SRC)/modules/inputParam.F90\
		$(SRC)/modules/monitor.f90\
		$(SRC)/modules/diffSizes.f90\
		$(SRC)/modules/block.F90\
		$(SRC)/modules/constants.F90 \
		$(SRC)/modules/precision_tapenade.f90\
		$(SRC)/modules/iteration.f90\
		$(SRC)/modules/section.f90\
		$(SRC)/modules/communication.f90\
		$(SRC)/modules/BCTypes.f90\
		$(SRC)/modules/paramTurb.F90\
		$(SRC)/modules/cgnsGrid.f90 \
		$(SRC)/modules/CpCurveFits.f90\
		$(SRC)/modules/blockPointers.F90 \
		$(SRC)/modules/flowVarRefState.F90 \
		$(SRC)/modules/costFunctions.F90\
		$(SRC)/initFlow/referenceState.F90\
		$(SRC)/utils/TSalpha.f90\
		$(SRC)/utils/TSalphadot.f90\
		$(SRC)/solver/getDirVector.f90\
		$(SRC)/solver/getDirAngle.f90\
		$(SRC)/solver/vectorRotation.f90\
		$(SRC)/utils/derivativeRigidRotAngle.f90\
		$(SRC)/utils/secondDerivativeRigidRotAngle.f90\
		$(SRC)/utils/computeGamma.f90\

# intermediate cost files
I_COST_FILES := $(ALL_COST_FILES:%=%.f90)

# ---------------------------------------------------------------------

#     ******************************************************************
#     *                                                                *
#     * General targets.                                               *
#     *                                                                *
#     ******************************************************************

default: ad_forward

cost:
# Differenate the cost functions in reverse
	rm -fr tmp_cost

# Next create the holidng directory:
	mkdir -p temp_cost

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_cost

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-outvars $(TAPENADE_COST_OUTVARS) \
	-vars $(TAPENADE_COST_VARS) \
	-head $(TAPENADE_COST_HEADROUTINE)  \
	-reverse $(TAPENADE_PRECISION) \
	-O temp_cost $(I_COST_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditReverse.py temp_cost outputCost

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_cost


ad_forward:
# First delete the holding directory if it exists
	rm -fr temp_forward

# Next create the holidng directory:
	mkdir -p temp_forward

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_forward

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-forward $(TAPENADE_PRECISION) \
	-O temp_forward $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditForward.py temp_forward outputForward

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

# Fix the AD bug in bcsymm_d.f90
	mv outputForward/bcsymm_d.f90 outputForward/bcsymm_d.f90.bp
	grep -v "   gamma1d(i, j) = 0.0_8" outputForward/bcsymm_d.f90.bp > outputForward/bcsymm_d.f90

ad_forward_multi:
# First delete the holding directory if it exists
	rm -fr temp_forward_multi

# Next create the holidng directory:
	mkdir -p temp_forward_multi

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_forward

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-diffvarname dv \
	-forward -multi $(TAPENADE_PRECISION) \
	-O temp_forward_multi $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditMulti.py temp_forward_multi outputForwardMulti

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

ad_reverse:
# First delete the holding directory if it exists
	rm -fr temp_reverse

# Next create the holidng directory:
	mkdir -p temp_reverse

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_reverse

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-reverse 	 -msglevel 30 $(TAPENADE_PRECISION) \
	-noisize \
	-O temp_reverse $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditReverse.py temp_reverse outputReverse

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

# Fix the AD bugs
	sed -i 's/   DO ii1=1,SIZE(viscsubfaceb(ii1)%tau, 1)/   DO ii1=1,SIZE(viscsubfaceb)/' outputReverse/forcesandmoments_b.f90
	sed -i 's/   DO ii1=1,SIZE(bcdata(ii1)%oarea, 1)/   DO ii1=1,SIZE(bcdata)/' outputReverse/block_res_b.f90
	sed -i 's/   DO ii1=SIZE(bcdata(ii1)%oarea, 1),1,-1/    DO ii1=SIZE(bcdata),1,-1/' outputReverse/block_res_b.f90
	sed -i 's/   DO ii1=1,SIZE(bcdatab(ii1)%norm, 1)/   DO ii1=1,SIZE(bcdatab)/' outputReverse/bceulerwall_b.f90


ad_forward_debugTGT:
# First delete the holding directory if it exists
	rm -fr temp_forward_debugTGT

# Next create the holidng directory:
	mkdir -p temp_forward_debugTGT

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_forward

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-difffuncname "%_T"  -debugTGT \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-forward $(TAPENADE_PRECISION) \
	-O temp_forward_debugTGT $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditForwardDebug.py temp_forward_debugTGT outputForwardTGT

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

ad_forward_debugADJ:
# First delete the holding directory if it exists
	rm -fr temp_forward_debugADJ

# Next create the holidng directory:
	mkdir -p temp_forward_debugADJ

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_forward

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-difffuncname "%_F"  -debugADJ \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-forward $(TAPENADE_PRECISION) \
	-O temp_forward_debugADJ $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditForwardDebugADJ.py temp_forward_debugADJ outputForwardADJ

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

ad_reverse_debugADJ:
# First delete the holding directory if it exists
	rm -fr temp_reverse_debugADJ

# Next create the holidng directory:
	mkdir -p temp_reverse_debugADJ

# Run preprocessor on all input files
	make -f Makefile_tapenade preprocess_reverse

# The following is the single Tapenade command to run:
	$(TAPENADE_HOME)/bin/tapenade -html \
	-difffuncname "%_R"  -debugADJ \
	-outvars $(TAPENADE_RES_OUTVARS) \
	-vars $(TAPENADE_RES_VARS) \
	-head $(TAPENADE_RES_HEADROUTINE)  \
	-reverse 	 -msglevel 30 $(TAPENADE_PRECISION) \
	-O temp_reverse_debugADJ $(I_RES_FILES)

# Run the auto-edit file:
	python autoEdit/autoEditReverseDebugADJ.py temp_reverse_debugADJ outputReverseADJ

# Remove preprocessor files
	make -f Makefile_tapenade cleanpreprocess_res

preprocess_cost:
	@echo "Preprocessing all input files for cost AD..."
	@for file in $(ALL_COST_FILES); do \
		echo Preprocessing $$file; \
		cpp -DUSE_TAPENADE -traditional -P  $$file $$file.f90; \
	done


preprocess_forward:
	@echo "Preprocessing all input files for forward mode AD..."
	@for file in $(ALL_RES_FILES); do \
		echo Preprocessing $$file; \
		cpp -DUSE_TAPENADE -DTAPENADE_FORWARD -traditional -P  $$file $$file.f90; \
	done

preprocess_reverse:
	@echo "Preprocessing all input files for reverse mode AD..."
	@for file in $(ALL_RES_FILES); do \
		echo Preprocessing $$file; \
		cpp -DUSE_TAPENADE -DTAPENADE_REVERSE -traditional -P $(FF90_ALL_FLAGS) $$file $$file.f90; \
	done

cleanpreprocess_res:
	@echo "Cleaning up residual preprocessed files..."
	@for file in $(ALL_RES_FILES); do \
		rm $$file.f90; \
	done

cleanpreprocess_cost:
	@echo "Cleaning up cost preprocessed files..."
	@for file in $(ALL_COST_FILES); do \
		rm $$file.f90; \
	done

all:	 default

clean:
	@echo " Making clean ... "
	@for subdir in $(TAPENADE_OUT_DIRS) ; \
		do \
			echo; \
			echo "making $@ in $$subdir"; \
			echo; \
			(cd $$subdir && rm -f *_b.f90 *_d.f90  *.msg *~) || exit 1; \
		done
