! This is a special function that is sued to alloc derivative values
! in blockpointers_d for use with the AD code. Since only one block of
! residuals needs to be run at a time, there is NO cooresponding
! flowdoms structure in block_d.f90 (block_d.f90 does not exist)
! Rather, the "pointers" in blockPointers are allocated directly for
! the required block and used directly. Coorespondignly
! dealloc_derivative values deallocated the arrays allocated here.

subroutine alloc_derivative_values(nn,sps)

  use blockPointers_d ! This modules includes blockPointers

  ! Alloc values in blockpointers_d for block nn and spectral instance sps
  
  ! Call setPointers to get the size info we need
  call setPointers(nn,1,sps)
  
  allocate(xd(0:ie,0:je,0:ke,3), stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)

  allocate(sid(0:ie,1:je,1:ke,3), &
           sjd(1:ie,0:je,1:ke,3), &
           skd(1:ie,1:je,0:ke,3),stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)

  allocate(rotMatrixId(il,2:jl,2:kl,3,3), &
           rotMatrixJd(2:il,jl,2:kl,3,3), &
           rotMatrixKd(2:il,2:jl,kl,3,3),stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)

  allocate(sd(ie,je,ke,3),      &
           sFaceId(0:ie,je,ke), &
           sFaceJd(ie,0:je,ke), &
           sFaceKd(ie,je,0:ke), stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)

  allocate(wd(0:ib,0:jb,0:kb,1:nw), &
           dwd(0:ib,0:jb,0:kb,1:nw), &
           fwd(0:ib,0:jb,0:kb,1:nw), &
           stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)

  allocate(pd(0:ib,0:jb,0:kb), &
           gammad(0:ib,0:jb,0:kb, stat=ierr)
  call EChk(ierr,__FILE__,__LINE__)


  if( viscous ) then
     allocate(rlvd(0:ib,0:jb,0:kb), stat=ierr)
     call EChk(ierr,__FILE__,__LINE__)
  end if

  call EChk(ierr,__FILE__,__LINE__)

  if( eddyModel ) then
     allocate(rev(0:ib,0:jb,0:kb),stat=ierr)
  end if

  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: rlvd, revd




  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: w1d, wrd
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: wnd

  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: dtld
  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: radid
  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: radjd
  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: radkd

  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmti1d
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmti2d
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmtj1d
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmtj2d
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmtk1d
  REAL(kind=realtype), DIMENSION(:, :, :, :), POINTER :: bmtk2d

  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: bvti1d, bvti2d
  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: bvtj1d, bvtj2d
  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: bvtk1d, bvtk2d

  REAL(kind=realtype), DIMENSION(:, :, :), POINTER :: d2walld

  


end subroutine alloc_derivative_values
