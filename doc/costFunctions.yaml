lift:
  desc: >
    Surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the direction of the ``liftIndex`` but perpendicular to the streamwise direction (i.e., dot product in this direction).
    To clarify, the angle of attack ``alpha`` does affect the direction of the force projection.
    Units: ``Newton``

drag:
  desc: >
    Surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the streamwise direction (i.e., dot product in this direction).
    Units: ``Newton``

cl:
  desc: >
    Lift coefficient computed as :math:`\frac{L}{qA}` where :math:`A` is ``refArea`` declared in ``AeroProblem()`` and :math:`q` is dynamic pressure.
    Units: None

cd:
  desc: >
    Drag coefficient computed as :math:`\frac{D}{qA}` where :math:`A` is ``refArea`` declared in ``AeroProblem()`` and :math:`q` is dynamic pressure.
    Units: None

clp:
  desc: >
    Components of the lift coefficient ``cl`` from pressure / normal stresses.
    Units: None

clv:
  desc: >
    Components of the lift coefficient ``cl`` from viscous / shear stresses.
    Units: None

clm:
  desc: >
    Momentum component of the lift coefficient ``cl`` that stems from time rate of change of velocity (unsteady simulation).
    Units: None

cdp:
  desc: >
    Components of the drag coefficient ``cd`` from pressure / normal stresses.
    Units: None

cdv:
  desc: >
    Components of the drag coefficient ``cd`` from viscous / shear stresses.
    Units: None

cdm:
  desc: >
    Momentum component of the drag coefficient ``cd`` that stems from time rate of change of velocity (unsteady simulation).
    Units: None

cofxx:
  desc: >
    The following center of force cost functions first list the force component (e.g., Fx) and then the coordinate (e.g., x coordinate).
    These cost functions look at the sum of all forces.
    Center of ``x`` force, ``x`` coordinate.
    Units: ``Meter``

cofxy:
  desc: >
    See ``cofxx`` description.

cofxz:
  desc: >
    See ``cofxx`` description.

cofyx:
  desc: >
    See ``cofxx`` description.

cofyy:
  desc: >
    See ``cofxx`` description.

cofyz:
  desc: >
    See ``cofxx`` description.

cofzx:
  desc: >
    See ``cofxx`` description.

cofzy:
  desc: >
    See ``cofxx`` description.

cofzz:
  desc: >
    See ``cofxx`` description.

fx:
  desc: >
    Force from surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the global :math:`x` direction.
    Note that if :math:`x` is the streamwise direction for a zero angle of attack wing, this is NOT the drag force when you apply a non-zero angle of attack.
    The same logic applies for ``fy`` and ``fz``.
    Units: ``Newton``

fy:
  desc: >
    Like ``fx`` but in the global :math:`y` direction
    Units: ``Newton``

fz:
  desc: >
    Like ``fx`` but in the global :math:`z` direction
    Units: ``Newton``

cfx:
  desc: >
    fx force coefficient computed as :math:`\frac{F_x}{qA}` where :math:`A` is ``refArea``. 
    Units: None

cfxp:
  desc: >
    Components of the fx coefficient ``cfx`` from pressure / normal stresses.
    Units: None

cfxv:
  desc: >
    Components of the fx coefficient ``cfx`` from viscous / shear stresses.
    Units: None

cfxm:
  desc: >
    Momentum component of the fx coefficient ``cfx`` that stems from time rate of change of velocity (unsteady simulation).
    Units: None

cfy:
  desc: >
    Like ``cfx`` but in the global :math:`y` direction.

cfyp:
  desc: >
    Like ``cfxp`` but in the global :math:`y` direction.

cfyv:
  desc: >
    Like ``cfxv`` but in the global :math:`y` direction.

cfym:
  desc: >
    Like ``cfxm`` but in the global :math:`y` direction.

cfz:
  desc: >
    Like ``cfx`` but in the global :math:`z` direction.

cfzp:
  desc: >
    Like ``cfxp`` but in the global :math:`z` direction.

cfzv:
  desc: >
    Like ``cfxv`` but in the global :math:`z` direction.

cfzm:
  desc: >
    Like ``cfxm`` but in the global :math:`z` direction.

mx:
  desc: >
    Moment about :math:`x` axis, computed at the location (``xRef``, ``yRef``, ``zRef``) as defined in ``AeroProblem``.
    Units: ``Newton - meter`` 

my:
  desc: >
    Moment about :math:`y` axis, origin if ``refAxis`` not specified.
    Units: ``Newton - meter`` 

mz:
  desc: >
    Moment about :math:`z` axis, origin if ``refAxis`` not specified.
    Units: ``Newton - meter`` 

cmx:
  desc: >
    Moment coefficient about :math:`x` axis, origin if ``refAxis`` not specified.
    Units: None

cmy:
  desc: >
    Moment coefficient about :math:`y` axis, origin if ``refAxis`` not specified.
    Units: None

cmz:
  desc: >
    Moment coefficient about :math:`z` axis computed as :math:`\frac{M_z}{qAc_{MAC}}` where :math:`A` is ``refArea`` and :math:`c_{MAC}` is a reference length (``AeroProblem.chordRef``).
    The :math:`z` axis is computed at the location (``xRef``, ``yRef``, ``zRef``) as defined in ``AeroProblem``.
    Units: None

cm0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO

cmzalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    Stability derivative, moment slope
    TODO

cmzalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    Stability derivative? Pitch rate coef moment?
    TODO

cl0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO

clalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    Lift slope dcl/dalpha
    TODO: Someone who knows aircraft stability should verify these

clalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    Lift stability pitch derivative
    TODO: Someone who knows aircraft stability should verify these

cfy0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cfyalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cfyalphddot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cd0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cdalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cdalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.

cmzq:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cmzqdot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

clq:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

clqdot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2022.
    TODO: Someone who knows aircraft stability should verify these

cbend:
  desc: >
    NOTE: Broken as of 2022.
    Root bending moment coefficient.
    Bending coefficient defined as :math:`\sigma L^2/ (qA)`
    TODO: Someone who knows aircraft stability should verify these

sepsensor:
  desc: >
    The separation values for the given surface is provided by this cost function.
    Please see the below paper for further details.
    See :cite:t:`Kenway2017b`.

sepsensoravgx:
  desc: >
    The separation sensor average in x direction.
    The sensor times the distance in x direction value is computed here.

sepsensoravgy:
  desc: >
    The separation sensor average in y direction.
    The sensor times the distance in y direction value is computed here.

sepsensoravgz:
  desc: >
    The separation sensor average in z direction.
    The sensor times the distance in z direction value is computed here.

cavitation:
  desc: >
    Cavitation sensor, not to be confused with the cavitation number.
    It is a modified Heaviside function accounting for how much :math:`-C_p` exceeds the cavitation number over the given surface family.
    The ``computeCavitation`` flag must be set to `True` because this introduces additional computations.
    You probably will specify the surface family with ``cgnsutilities``.
    See :cite:t:`Liao2021a`.
    Units: None

cpmin:
  desc: >
    Minimum coefficient of pressure (:math:`C_p`) over the given surface family.
    This function is computed with Kreisselmeier-Steinhauser (KS) function aggregation resulting in a conservative constraint because the ``cpmin`` outputted will never be more negative than the true :math:`C_{p,min}`.
    The ``computeCavitation`` flag must be set to ``True`` because this introduces additional computations involving global communications across processors;
    If ``False``, the returned value is zero.
    You probably will specify the surface family with ``cgnsutilities``.
    Units: None

mdot:
  desc: >
    Mass flow rate in the freestream direction.
    This quantity is important for computing momentum forces.
    Units: ``kg / s``

mavgptot:
  desc: >
    Mass flow rate averaged total pressure 
    Units: ``Pascal``

aavgptot:
  desc: >
    Cell area averaged total pressure 
    Units: ``Pascal``

aavgps:
  desc: >
    Cell area averaged static pressure
    Units: ``Pascal``

mavgttot:
  desc: >
    Mass flow rate averaged total temperature 
    Units: ``Kelvin``

mavgps:
  desc: >
    Mass flow rate averaged static pressure
    Units: ``Pascal``

mavgmn:
  desc: >
    Mass flow rate averaged Mach number
    Units: None

area:
  desc: >
    The area of the integrated surface. 
    This can be all wall surface or the interested surface defined in the runscript.
    Units: ``meter^2``

axismoment:
  desc: >
    Moments about the axis given by ``momentAxis``.
    Units: ``Newton - meter``

flowpower:
  desc: >
    Added power by actuator region to the flow volume computed from volume integration.
    Units: ``Watt``

forcexpressure:
  desc: >
    Pressure component of force in the global :math:`x` direction.
    The pressure is calcualted as the difference of the pressure on the wall and the free stream pressure.
    For closed surfaces, the free stream pressure delta will cancel and the resulting force calculation is correct.
    However, integrating the force on open surfaces may result in unexpected values because the free stream pressure will not cancel.
    Dimensional ``cfxp``
    Units: ``Newton``

forceypressure:
  desc: >
    Like ``forcexpressure`` but in the global :math:`y` direction.
    Units: ``Newton``

forcezpressure:
  desc: >
    Like ``forcexpressure`` but in the global :math:`z` direction.
    Units: ``Newton``

forcexviscous:
  desc: >
    Viscous component of force in x direction.
    Dimensional version of ``cfxv``.
    Units: ``Newton``

forceyviscous:
  desc: >
    Viscous component of force in y direction
    Units: ``Newton``

forcezviscous:
  desc: >
    Viscous component of force in z direction
    Units: ``Newton``

forcexmomentum:
  desc: >
    Momentum component of force in x direction
    Units: ``Newton``

forceymomentum:
  desc: >
    Momentum component of force in y direction
    Units: ``Newton``

forcezmomentum:
  desc: >
    Momentum component of force in z direction
    Units: ``Newton``

dragpressure:
  desc: >
    Pressure drag
    Units: ``Newton``

dragviscous:
  desc: >
    Viscous drag
    Units: ``Newton``

dragmomentum:
  desc: >
    Momentum drag from time rate of change of velocity (unsteady simulations).
    Dimensional ``cdm``
    Units: ``Newton``

liftpressure:
  desc: >
    Pressure component of lift
    Units: ``Newton``

liftviscous:
  desc: >
    Viscous lift
    Units: ``Newton``

liftmomentum:
  desc: >
    Momentum lift (due to changing momentum of flow in unsteady simulation)
    Units: ``Newton``

mavgvi:
  desc: >
    Derived velocity average (TODO:)

mavgvx:
  desc: >
    Mass-averaged :math:`x` velocity (i.e., :math:`\Sigma \dot{m}_x / \Sigma \dot{m}`).
    Units: ``m / s``

mavgvy:
  desc: >
    Mass-averaged :math:`y` velocity.
    Units: ``m / s``

mavgvz:
  desc: >
    Mass-averaged :math:`z` velocity.
    Units: ``m / s``

cperror2:
  desc: >
    The square of the difference between computed cp and target cp* for inverse design.
    See ``setTargetCp()`` call.
