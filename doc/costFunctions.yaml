lift:
  desc: >
    Surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the direction of the ``liftIndex`` but perpendicular to the streamwise direction (i.e., dot product in this direction).
    To clarify, the angle of attack ``alpha`` does affect the direction of the force projection.
    Units: ``Newton``

drag:
  desc: >
    Surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the streamwise direction (i.e., dot product in this direction).
    Units: ``Newton``

cl:
  desc: >
    Lift coefficient computed as :math:`\frac{L}{qA}` where :math:`A` is ``areaRef`` declared in ``AeroProblem()`` and :math:`q` is dynamic pressure.
    Units: ``None``

cd:
  desc: >
    Drag coefficient computed as :math:`\frac{D}{qA}` where :math:`A` is ``areaRef`` declared in ``AeroProblem()`` and :math:`q` is dynamic pressure.
    Units: ``None``

clp:
  desc: >
    Component of the lift coefficient ``cl`` from pressure / normal stresses.
    Units: ``None``

clv:
  desc: >
    Component of the lift coefficient ``cl`` from viscous / shear stresses.
    Units: ``None``

clm:
  desc: >
    Momentum component of the lift coefficient ``cl`` that stems from time rate of change of velocity (unsteady simulation).
    Units: ``None``

cdp:
  desc: >
    Component of the drag coefficient ``cd`` from pressure / normal stresses.
    Units: ``None``

cdv:
  desc: >
    Component of the drag coefficient ``cd`` from viscous / shear stresses.
    Units: ``None``

cdm:
  desc: >
    Momentum component of the drag coefficient ``cd`` that stems from time rate of change of velocity (unsteady simulation).
    Units: ``None``

cofxx:
  desc: >
    The following center of force cost functions first list the force component (e.g., Fx) and then the coordinate (e.g., x coordinate).
    These cost functions look at the sum of all forces.
    Center of ``x`` force, ``x`` coordinate.
    Units: ``Meter``

cofxy:
  desc: >
    Center of ``x`` force, ``y`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofxz:
  desc: >
    Center of ``x`` force, ``z`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofyx:
  desc: >
    Center of ``y`` force, ``x`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofyy:
  desc: >
    Center of ``y`` force, ``y`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofyz:
  desc: >
    Center of ``y`` force, ``z`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofzx:
  desc: >
    Center of ``z`` force, ``x`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofzy:
  desc: >
    Center of ``z`` force, ``y`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

cofzz:
  desc: >
    Center of ``z`` force, ``z`` coordinate.
    See ``cofxx`` description for more details.
    Units: ``Meter``

colx:
  desc: >
    Center of lift force, ``x`` coordinate.
    Units: ``Meter``

coly:
  desc: >
    Center of lift force, ``y`` coordinate.
    Units: ``Meter``

colz:
  desc: >
    Center of lift force, ``z`` coordinate.
    Units: ``Meter``

fx:
  desc: >
    Force from surface stresses (this includes shear/viscous, normal/pressure, and momentum/unsteady stresses) integrated in the global :math:`x` direction.
    This direction does not change based on angle of attack and side slip angle.
    Units: ``Newton``

fy:
  desc: >
    Like ``fx`` but in the global :math:`y` direction
    Units: ``Newton``

fz:
  desc: >
    Like ``fx`` but in the global :math:`z` direction
    Units: ``Newton``

cfx:
  desc: >
    Force coefficient in the global :math:`x` direction computed as :math:`\frac{F_x}{qA}` where :math:`A` is ``areaRef``.
    Units: ``None``

cfxp:
  desc: >
    Components of the fx coefficient ``cfx`` from pressure / normal stresses.
    Units: ``None``

cfxv:
  desc: >
    Components of the fx coefficient ``cfx`` from viscous / shear stresses.
    Units: ``None``

cfxm:
  desc: >
    Momentum component of the fx coefficient ``cfx`` that stems from time rate of change of velocity (unsteady simulation).
    Units: ``None``

cfy:
  desc: >
    Like ``cfx`` but in the global :math:`y` direction.

cfyp:
  desc: >
    Like ``cfxp`` but in the global :math:`y` direction.

cfyv:
  desc: >
    Like ``cfxv`` but in the global :math:`y` direction.

cfym:
  desc: >
    Like ``cfxm`` but in the global :math:`y` direction.

cfz:
  desc: >
    Like ``cfx`` but in the global :math:`z` direction.

cfzp:
  desc: >
    Like ``cfxp`` but in the global :math:`z` direction.

cfzv:
  desc: >
    Like ``cfxv`` but in the global :math:`z` direction.

cfzm:
  desc: >
    Like ``cfxm`` but in the global :math:`z` direction.

mx:
  desc: >
    Moment about :math:`x` axis, computed at the location (``xRef``, ``yRef``, ``zRef``) as defined in ``AeroProblem``.
    Units: ``Newton * meter``

my:
  desc: >
    Moment about :math:`y` axis, computed at the location (``xRef``, ``yRef``, ``zRef``) as defined in ``AeroProblem``.
    Units: ``Newton * meter``

mz:
  desc: >
    Moment about :math:`z` axis, computed at the location (``xRef``, ``yRef``, ``zRef``) as defined in ``AeroProblem``.
    Units: ``Newton * meter``

cmx:
  desc: >
    Moment coefficient about :math:`x` axis computed as :math:`\frac{M_x}{qAc_{ref}}` where :math:`A` is ``areaRef`` and :math:`c_{ref}` is a reference length (``AeroProblem.chordRef``).
    Units: ``None``

cmy:
  desc: >
    Moment coefficient about :math:`y` axis computed as :math:`\frac{M_y}{qAc_{ref}}` where :math:`A` is ``areaRef`` and :math:`c_{ref}` is a reference length (``AeroProblem.chordRef``).
    Units: ``None``

cmz:
  desc: >
    Moment coefficient about :math:`z` axis computed as :math:`\frac{M_z}{qAc_{ref}}` where :math:`A` is ``areaRef`` and :math:`c_{ref}` is a reference length (``AeroProblem.chordRef``).
    Units: ``None``

cm0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Moment coefficient about the :math:`z` axis at the zero value of the time spectral motion perturbation.

cmzalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the moment coefficient about the :math:`z` axis with respect to angle of attack.

cmzalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the moment coefficient about the :math:`z` axis with respect to the time derivative of angle of attack.

cl0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Lift coefficient at the zero value of the time spectral motion perturbation.

clalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the lift coefficient with respect to angle of attack.

clalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the lift coefficient with respect to the time derivative of angle of attack.

cfy0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Force coefficient in the :math:`y` axis direction at the zero value of the time spectral motion perturbation.

cfyalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the force coefficient in the :math:`y` axis direction with respect to angle of attack.

cfyalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the force coefficient in the :math:`y` axis direction with respect to the time derivative of angle of attack.

cd0:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Drag coefficient at the zero value of the time spectral motion perturbation.

cdalpha:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the drag coefficient with respect to angle of attack.

cdalphadot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the drag coefficient with respect to the time derivative of angle of attack.

cmzq:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the moment coefficient about the :math:`z` axis with respect to pitch rate.

cmzqdot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the moment coefficient about the :math:`z` axis with respect to the time derivative of pitch rate.

clq:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the lift coefficient with respect to pitch rate.

clqdot:
  desc: >
    NOTE: Time spectral stability derivatives are broken as of 2023.
    Derivative of the lift coefficient with respect to the time derivative of pitch rate.

cbend:
  desc: >
    NOTE: Broken as of 2023.
    Root bending moment coefficient.

sepsensor:
  desc: >
    The separation values for the given surface is provided by this cost function.
    See :cite:t:`Kenway2017b` for more details.

sepsensoravgx:
  desc: >
    The separation sensor average in x direction.
    The sensor times the distance in x direction value is computed here.

sepsensoravgy:
  desc: >
    The separation sensor average in y direction.
    The sensor times the distance in y direction value is computed here.

sepsensoravgz:
  desc: >
    The separation sensor average in z direction.
    The sensor times the distance in z direction value is computed here.

cavitation:
  desc: >
    Cavitation sensor, not to be confused with the cavitation number.
    It is a modified Heaviside function accounting for how much :math:`-C_p` exceeds the cavitation number over the given surface family.
    The ``computeCavitation`` flag must be set to `True` because this introduces additional computations.
    The most common use case of this cost function involves constraining it over a specific surface family, not all walls.
    See :cite:t:`Liao2021a` for more details.
    Units: ``None``

cpmin:
  desc: >
    Minimum coefficient of pressure (:math:`C_p`) over the given surface family.
    This function is computed with Kreisselmeier-Steinhauser (KS) function aggregation resulting in a conservative constraint because the ``cpmin`` outputted will always be more negative than the true :math:`C_{p,min}`.
    The ``computeCavitation`` flag must be set to ``True`` because this introduces additional computations involving global communications across processors.
    If ``False``, the returned value is zero.
    Units: ``None``

mdot:
  desc: >
    Mass flow rate through the integration surface.
    Units: ``kg / s``

mavgptot:
  desc: >
    Mass flow rate averaged total pressure.
    Units: ``Pascal``

aavgptot:
  desc: >
    Area averaged total pressure.
    Units: ``Pascal``

aavgps:
  desc: >
    Area averaged static pressure.
    Units: ``Pascal``

mavgttot:
  desc: >
    Mass flow rate averaged total temperature.
    Units: ``Kelvin``

mavgps:
  desc: >
    Mass flow rate averaged static pressure.
    Units: ``Pascal``

mavgmn:
  desc: >
    Mass flow rate averaged Mach number.
    Units: ``None``

area:
  desc: >
    The area of the integrated surface.
    Units: ``meter^2``

axismoment:
  desc: >
    Moments about the axis given by ``momentAxis`` defined in the ``AeroProblem()``.
    Units: ``Newton * meter``

flowpower:
  desc: >
    Added power by actuator region to the flow volume computed from volume integration.
    Units: ``Watt``

forcexpressure:
  desc: >
    Pressure component of force in the global :math:`x` direction.
    The pressure is calcualted as the difference of the pressure on the wall and the free stream pressure.
    For closed surfaces, the free stream pressure delta will cancel and the resulting force calculation is correct.
    However, integrating the force on open surfaces will not result in the free stream static pressure contribution cancelling out.
    Dimensional ``cfxp``
    Units: ``Newton``

forceypressure:
  desc: >
    Like ``forcexpressure`` but in the global :math:`y` direction.
    Units: ``Newton``

forcezpressure:
  desc: >
    Like ``forcexpressure`` but in the global :math:`z` direction.
    Units: ``Newton``

forcexviscous:
  desc: >
    Viscous component of force in x direction.
    Dimensional version of ``cfxv``.
    Units: ``Newton``

forceyviscous:
  desc: >
    Viscous component of force in y direction.
    Units: ``Newton``

forcezviscous:
  desc: >
    Viscous component of force in z direction.
    Units: ``Newton``

forcexmomentum:
  desc: >
    Momentum component of force in x direction.
    Units: ``Newton``

forceymomentum:
  desc: >
    Momentum component of force in y direction.
    Units: ``Newton``

forcezmomentum:
  desc: >
    Momentum component of force in z direction.
    Units: ``Newton``

dragpressure:
  desc: >
    Pressure drag.
    Units: ``Newton``

dragviscous:
  desc: >
    Viscous drag.
    Units: ``Newton``

dragmomentum:
  desc: >
    Momentum drag from time rate of change of velocity (unsteady simulations).
    Dimensional ``cdm``
    Units: ``Newton``

liftpressure:
  desc: >
    Pressure component of lift.
    Units: ``Newton``

liftviscous:
  desc: >
    Viscous component of lift.
    Units: ``Newton``

liftmomentum:
  desc: >
    Momentum lift (due to changing momentum of flow in unsteady simulation).
    Units: ``Newton``

mavgvi:
  desc: >
    A derived velocity average.

mavgvx:
  desc: >
    Mass-averaged :math:`x` velocity (i.e., :math:`\Sigma \dot{m}_x / \Sigma \dot{m}`).
    Units: ``m / s``

mavgvy:
  desc: >
    Mass-averaged :math:`y` velocity.
    Units: ``m / s``

mavgvz:
  desc: >
    Mass-averaged :math:`z` velocity.
    Units: ``m / s``

cperror2:
  desc: >
    The square of the difference between computed cp and target cp* for inverse design.
    See ``setTargetCp()`` call.
