!
!      ******************************************************************
!      *                                                                *
!      * File:          bcDomainInterface.f90                           *
!      * Author:        Seonghyeon Hahn, Edwin van der Weide            *
!      * Starting date: 05-25-2005                                      *
!      * Last modified: 09-27-2005                                      *
!      *                                                                *
!      ******************************************************************
!
       subroutine bcDomainInterface(secondHalo, correctForK)
!
!      ******************************************************************
!      *                                                                *
!      * bcDomainInterface applies the domain-interface boundary        *
!      * condition, where necessary flow variables are obtained from    *
!      * the coupler. More options can be added in the future.          *
!      *                                                                *
!      ******************************************************************
!
       use blockPointers
       use BCTypes
       use constants
       use couplerParam
       use flowVarRefState
       use inputDiscretization
       use inputPhysics
       use iteration
       implicit none
!
!      Subroutine arguments.
!
       logical, intent(in) :: secondHalo, correctForK
!
!      Local parameter.
!
       real(kind=realType), parameter :: twoThird = two*third
!
!      Local variables.
!
       integer(kind=intType) :: i, j, l, nn, iturLoop1, iturLoop2

       real(kind=realType) :: gm1, ovg, ovgm1
       real(kind=realType) :: ptot, ttot, htot, a2tot, r, alpha, beta
       real(kind=realType) :: pExit, pInt, a, ac, ss, scaleFact
       real(kind=realType) :: aa, bb, cc, dd, q, q2, a2, m2
       real(kind=realType) :: ssx, ssy, ssz, nnx, nny, nnz
       real(kind=realType) :: rho, velx, vely, velz
       real(kind=realType) :: ue, ve, we, qne, qnh

       real(kind=realType), dimension(:,:,:), pointer :: ww1, ww2
       real(kind=realType), dimension(:,:),   pointer :: pp1, pp2
       real(kind=realType), dimension(:,:),   pointer :: gamma2
       real(kind=realType), dimension(:,:),   pointer :: rlv1, rlv2
       real(kind=realType), dimension(:,:),   pointer :: rev1, rev2
!
!      Interfaces
!
       interface
         subroutine setBCPointers(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, &
                                  rev1, rev2, offset)
           use blockPointers
           implicit none

           integer(kind=intType), intent(in) :: nn, offset
           real(kind=realType), dimension(:,:,:), pointer :: ww1, ww2
           real(kind=realType), dimension(:,:),   pointer :: pp1, pp2
           real(kind=realType), dimension(:,:),   pointer :: rlv1, rlv2
           real(kind=realType), dimension(:,:),   pointer :: rev1, rev2
         end subroutine setBCPointers
       end interface
!
!      ******************************************************************
!      *                                                                *
!      * Begin execution                                                *
!      *                                                                *
!      ******************************************************************
!
       ! Loop over the boundary condition subfaces of this block.

       bocos: do nn=1,nBocos

         select case (BCType(nn))

           case (DomainInterfaceAll)

             ! Nullify the pointers and set them to the correct subface.
             ! They are nullified first, because some compilers require
             ! that.

             nullify(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2)
             call setBCPointers(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, &
                                rev1, rev2, 0_intType)

             ! Flow variables are already prescribed from the coupler
             ! (see the subroutine setInterfaceData).

             ! Loop over the generic subface and copy the density, 
             ! velocities, pressure and turbulent variables.

             do j=BCData(nn)%jcBeg, BCData(nn)%jcEnd
               do i=BCData(nn)%icBeg, BCData(nn)%icEnd

                 ww1(i,j,irho) = BCData(nn)%rho(i,j)
                 ww1(i,j,ivx)  = BCData(nn)%velx(i,j)
                 ww1(i,j,ivy)  = BCData(nn)%vely(i,j)
                 ww1(i,j,ivz)  = BCData(nn)%velz(i,j)
                 pp1(i,j)      = BCData(nn)%ps(i,j)

                 if(currentLevel /= 1) then
                   iturLoop1 = nt1MG
                   iturLoop2 = nt2MG
                 else
                   iturLoop1 = nt1
                   iturLoop2 = nt2
                 endif

                 do l=iturLoop1,iturLoop2
                   ww1(i,j,l) = BCData(nn)%turbInlet(i,j,l)
                   if(i.eq.10.and.j.eq.10) &
                   write(*,900) i, j, l, BCData(nn)%turbInlet(i,j,l)
               900 format('i, j, l, turbInlet(l) =',3i5,e21.12)
                 enddo

                 ! Correct the pressure if a k-equation is present.

                 if( correctForK )     &
                   pp1(i,j) = pp1(i,j) &
                            + twoThird*ww1(i,j,irho)*ww1(i,j,itu1)

                 ! Set the viscosities in the halo to the viscosities
                 ! in the donor cell.

                 if( viscous )   rlv1(i,j) = rlv2(i,j)
                 if( eddyModel ) rev1(i,j) = rev2(i,j)

               enddo
             enddo

             ! Compute the total energy for these halo cells.

             call computeEtot(icBeg(nn),icEnd(nn), jcBeg(nn),jcEnd(nn), &
                              kcBeg(nn),kcEnd(nn), correctForK)

             ! Extrapolate the state vectors in case a second halo
             ! is needed.

             if( secondHalo ) call extrapolate2ndHalo(nn, correctForK)

           !============================================================

           case (DomainInterfaceRhoUVW)

             ! Nullify the pointers and set them to the correct subface.
             ! They are nullified first, because some compilers require
             ! that.

             nullify(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2)
             call setBCPointers(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, &
                                rev1, rev2, 0_intType)

             ! Set the additional pointer for gamma2.

             select case (BCFaceID(nn))
               case (iMin)
                 gamma2 => gamma(2,1:,1:)
               case (iMax)
                 gamma2 => gamma(il,1:,1:)
               case (jMin)
                 gamma2 => gamma(1:,2,1:)
               case (jMax)
                 gamma2 => gamma(1:,jl,1:)
               case (kMin)
                 gamma2 => gamma(1:,1:,2)
               case (kMax)
                 gamma2 => gamma(1:,1:,kl)
             end select

             ! Flow variables are already prescribed from the coupler
             ! (see the subroutine setInterfaceData).

             ! Loop over the generic subface and copy the density,
             ! velocities and turbulent variables. The pressure is
             ! computed using Riemann invariants.

             do j=BCData(nn)%jcBeg, BCData(nn)%jcEnd
               do i=BCData(nn)%icBeg, BCData(nn)%icEnd

                 rho  = BCData(nn)%rho(i,j)
                 velx = BCData(nn)%velx(i,j)
                 vely = BCData(nn)%vely(i,j)
                 velz = BCData(nn)%velz(i,j)
                 nnx  = BCData(nn)%norm(i,j,1)
                 nny  = BCData(nn)%norm(i,j,2)
                 nnz  = BCData(nn)%norm(i,j,3)

                 ! Some abbreviations in which gamma occurs.

                 gm1   = gamma2(i,j) - one
                 ovgm1 = one/gm1

                 ! Determine the acoustic Riemann variable that must be
                 ! extrapolated from the domain.

                 r    = one/ww2(i,j,irho)
                 a2   = gamma2(i,j)*pp2(i,j)*r
                 beta = ww2(i,j,ivx)*nnx + ww2(i,j,ivy)*nny  &
                      + ww2(i,j,ivz)*nnz + two*ovgm1*sqrt(a2)

                 ! Compute the speed of sound squared in the halo.

                 a2 = half*gm1*(beta - velx*nnx - vely*nny - velz*nnz)
                 a2 = max(zero,a2)
                 a2 = a2*a2

                 ! Compute the pressure in the halo, assuming a
                 ! constant value of gamma.

                 pp1(i,j) = rho*a2/gamma2(i,j)

                 ! Copy the density, velocities and turbulent variables.

                 ww1(i,j,irho) = rho
                 ww1(i,j,ivx)  = velx
                 ww1(i,j,ivy)  = vely
                 ww1(i,j,ivz)  = velz

                 if(currentLevel /= 1) then
                   iturLoop1 = nt1MG
                   iturLoop2 = nt2MG
                 else
                   iturLoop1 = nt1
                   iturLoop2 = nt2
                 endif

                 do l=iturLoop1,iturLoop2
                   ww1(i,j,l) = BCData(nn)%turbInlet(i,j,l)
                   if(i.eq.10.and.j.eq.10) &
                   write(*,900) i, j, l, BCData(nn)%turbInlet(i,j,l)
                 enddo

                 ! Set the viscosities in the halo to the viscosities
                 ! in the donor cell.

                 if( viscous )   rlv1(i,j) = rlv2(i,j)
                 if( eddyModel ) rev1(i,j) = rev2(i,j)

               enddo
             enddo

             ! Compute the total energy for these halo cells.

             call computeEtot(icBeg(nn),icEnd(nn), jcBeg(nn),jcEnd(nn), &
                              kcBeg(nn),kcEnd(nn), correctForK)

             ! Extrapolate the state vectors in case a second halo
             ! is needed.

             if( secondHalo ) call extrapolate2ndHalo(nn, correctForK)

           !============================================================

           case (DomainInterfaceP)

             ! Nullify the pointers and set them to the correct subface.
             ! They are nullified first, because some compilers require
             ! that.

             nullify(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2)
             call setBCPointers(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, &
                                rev1, rev2, 0_intType)

             ! Set the additional pointer for gamma2.

             select case (BCFaceID(nn))
               case (iMin)
                 gamma2 => gamma(2,1:,1:)
               case (iMax)
                 gamma2 => gamma(il,1:,1:)
               case (jMin)
                 gamma2 => gamma(1:,2,1:)
               case (jMax)
                 gamma2 => gamma(1:,jl,1:)
               case (kMin)
                 gamma2 => gamma(1:,1:,2)
               case (kMax)
                 gamma2 => gamma(1:,1:,kl)
             end select

             ! Loop over the generic subface to set the state in the
             ! halo cells.

             do j=BCData(nn)%jcBeg, BCData(nn)%jcEnd
               do i=BCData(nn)%icBeg, BCData(nn)%icEnd

                 ! Store a couple of variables, such as the static
                 ! pressure and grid unit outward normal, a bit easier.

                 pExit = BCData(nn)%ps(i,j)

                 nnx = BCData(nn)%norm(i,j,1)
                 nny = BCData(nn)%norm(i,j,2)
                 nnz = BCData(nn)%norm(i,j,3)

                 ! Abbreviate 1/gamma and 1/(gamma -1) a bit easier.

                 ovg   = one/gamma2(i,j)
                 ovgm1 = one/(gamma2(i,j)-one)

                 ! Store the internal pressure and correct for the
                 ! possible presence of a k-equation.

                 pInt = pp2(i,j)
                 if( correctForK ) &
                   pInt = pInt - twoThird*ww2(i,j,irho)*ww2(i,j,itu1)

                 ! Compute the velocity components, the normal velocity
                 ! and the speed of sound for the internal cell.

                 r   = one/ww2(i,j,irho)
                 a2  = gamma2(i,j)*pInt*r
                 a   = sqrt(a2)
                 ue  = ww2(i,j,ivx)
                 ve  = ww2(i,j,ivy)
                 we  = ww2(i,j,ivz)
                 qne = ue*nnx + ve*nny + we*nnz

                 ! Compute the entropy and the acoustic variable.
                 ! These Riemann invariants, as well as the tangential
                 ! velocity components, are extrapolated.

                 ss = pInt*(r**gamma2(i,j))
                 ac = qne + two*a*ovgm1

                 ! Compute the state in the halo.

                 ww1(i,j,irho) = (pExit/ss)**ovg
                 pp1(i,j)      = pExit
                 a             = sqrt(gamma2(i,j)*pExit/ww1(i,j,irho))
                 qnh           = ac - two*a*ovgm1
                 ww1(i,j,ivx)  = ue + (qnh - qne)*nnx
                 ww1(i,j,ivy)  = ve + (qnh - qne)*nny
                 ww1(i,j,ivz)  = we + (qnh - qne)*nnz

                 ! Extrapolate the primitive turbulent variables.

                 if(currentLevel /= 1) then
                   iturLoop1 = nt1MG
                   iturLoop2 = nt2MG
                 else
                   iturLoop1 = nt1
                   iturLoop2 = nt2
                 endif

                 do l=iturLoop1,iturLoop2
                   ww1(i,j,l) = ww2(i,j,l)
                 enddo

                 ! Correct the pressure if a k-equation is present.

                 if( correctForK )     &
                   pp1(i,j) = pp1(i,j) &
                            + twoThird*ww1(i,j,irho)*ww1(i,j,itu1)

                 ! Set the viscosities in the halo to the viscosities
                 ! in the donor cell.

                 if( viscous )   rlv1(i,j) = rlv2(i,j)
                 if( eddyModel ) rev1(i,j) = rev2(i,j)

               enddo
             enddo

             ! Compute the total energy for these halo cells.

             call computeEtot(icBeg(nn),icEnd(nn), jcBeg(nn),jcEnd(nn), &
                              kcBeg(nn),kcEnd(nn), correctForK)

             ! Extrapolate the state vectors in case a second halo
             ! is needed.

             if( secondHalo ) call extrapolate2ndHalo(nn, correctForK)

           !============================================================

           case (DomainInterfaceRho)

             call terminate("analyzeString", &
                            "DomainInterfaceRho not implemented yet")

           !============================================================

           case (DomainInterfaceTotal)

             ! Nullify the pointers and set them to the correct subface.
             ! They are nullified first, because some compilers require
             ! that.

             nullify(ww1, ww2, pp1, pp2, rlv1, rlv2, rev1, rev2)
             call setBCPointers(nn, ww1, ww2, pp1, pp2, rlv1, rlv2, &
                                rev1, rev2, 0_intType)

             ! Set the additional pointer for gamma2.

             select case (BCFaceID(nn))
               case (iMin)
                 gamma2 => gamma(2,1:,1:)
               case (iMax)
                 gamma2 => gamma(il,1:,1:)
               case (jMin)
                 gamma2 => gamma(1:,2,1:)
               case (jMax)
                 gamma2 => gamma(1:,jl,1:)
               case (kMin)
                 gamma2 => gamma(1:,1:,2)
               case (kMax)
                 gamma2 => gamma(1:,1:,kl)
             end select

             ! Loop over the generic subface to set the state in the
             ! halo cells.

             do j=BCData(nn)%jcBeg, BCData(nn)%jcEnd
               do i=BCData(nn)%icBeg, BCData(nn)%icEnd

                 ! Store a couple of variables, such as the total
                 ! pressure, total temperature, total enthalpy, flow
                 ! direction and grid unit outward normal, a bit easier.

                 ptot = BCData(nn)%ptInlet(i,j)
                 ttot = BCData(nn)%ttInlet(i,j)
                 htot = BCData(nn)%htInlet(i,j)

                 ssx  = BCData(nn)%flowXdirInlet(i,j)
                 ssy  = BCData(nn)%flowYdirInlet(i,j)
                 ssz  = BCData(nn)%flowZdirInlet(i,j)

                 nnx = BCData(nn)%norm(i,j,1)
                 nny = BCData(nn)%norm(i,j,2)
                 nnz = BCData(nn)%norm(i,j,3)

                 ! Some abbreviations in which gamma occurs.

                 gm1   = gamma2(i,j) - one
                 ovgm1 = one/gm1

                 ! Determine the acoustic Riemann variable that must be
                 ! extrapolated from the domain.

                 r    = one/ww2(i,j,irho)
                 a2   = gamma2(i,j)*pp2(i,j)*r
                 beta = ww2(i,j,ivx)*nnx + ww2(i,j,ivy)*nny  &
                      + ww2(i,j,ivz)*nnz + two*ovgm1*sqrt(a2)

                 ! Correct the value of the Riemann invariant if total
                 ! enthalpy scaling must be applied. This scaling may
                 ! be needed for stability if large gradients of the
                 ! total temperature are prescribed.

                 scaleFact = one
                 if( hScalingInlet ) &
                  scaleFact = sqrt(htot/(r*(ww2(i,j,irhoE) + pp2(i,j))))

                 beta = beta*scaleFact

                 ! Compute the value of a2 + 0.5*gm1*q2, which is the
                 ! total speed of sound for constant cp. However, the
                 ! expression below is also valid for variable cp,
                 ! although a linearization around the value of the
                 ! internal cell is performed.

                 q2    = ww2(i,j,ivx)**2 + ww2(i,j,ivy)**2 &
                       + ww2(i,j,ivz)**2
                 a2tot = gm1*(htot - r*(ww2(i,j,irhoE) + pp2(i,j)) &
                       +      half*q2) + a2

                 ! Compute the dot product between the normal and the
                 ! velocity direction. This value should be negative.

                 alpha = nnx*ssx + nny*ssy + nnz*ssz

                 ! Compute the coefficients in the quadratic equation
                 ! for the magnitude of the velocity.

                 aa =  half*gm1*alpha*alpha + one
                 bb = -gm1*alpha*beta
                 cc =  half*gm1*beta*beta - two*ovgm1*a2tot

                 ! Solve the equation for the magnitude of the
                 ! velocity. As this value must be positive and both aa
                 ! and bb are positive (alpha is negative and beta is
                 ! positive up till Mach = 5.0 or so, which is not
                 ! really subsonic anymore), it is clear which of the
                 ! two possible solutions must be taken. Some clipping
                 ! is present, but this is normally not active.

                 dd = bb*bb - four*aa*cc
                 dd = sqrt(max(zero,dd))
                 q  = (-bb + dd)/(two*aa)
                 q  = max(zero,q)
                 q2 = q*q

                 ! Compute the speed of sound squared from the total
                 ! speed of sound equation (== total enthalpy equation
                 ! for constant cp).

                 a2 = a2tot - half*gm1*q2

                 ! Compute the Mach number squared and cut it between
                 ! 0.0 and 1.0. Adapt the velocity and speed of sound
                 ! squared accordingly.

                 m2 = q2/a2
                 m2 = min(one,m2)
                 q2 = m2*a2
                 q  = sqrt(q2)
                 a2 = a2tot - half*gm1*q2

                 ! Compute the velocities in the halo cell and use rho,
                 ! rhoe and p as temporary buffers to store the total
                 ! temperature, total pressure and static temperature.

                 ww1(i,j,ivx)  = q*ssx
                 ww1(i,j,ivy)  = q*ssy
                 ww1(i,j,ivz)  = q*ssz

                 ww1(i,j,irho)  = ttot
                 pp1(i,j)       = ptot
                 ww1(i,j,irhoE) = a2/(gamma2(i,j)*RGas)

                 ! Compute the turbulent variables, which are
                 ! prescribed.

                 if(currentLevel /= 1) then
                   iturLoop1 = nt1MG
                   iturLoop2 = nt2MG
                 else
                   iturLoop1 = nt1
                   iturLoop2 = nt2
                 endif

                 do l=iturLoop1,iturLoop2
                   ww1(i,j,l) = BCData(nn)%turbInlet(i,j,l)
                   if(i.eq.10.and.j.eq.10) &
                   write(*,900) i, j, l, BCData(nn)%turbInlet(i,j,l)
                 enddo

                 ! Set the viscosities in the halo to the viscosities
                 ! in the donor cell.

                 if( viscous )   rlv1(i,j) = rlv2(i,j)
                 if( eddyModel ) rev1(i,j) = rev2(i,j)

               enddo
             enddo

             ! Compute the pressure and density for these halo's.
             ! This is identical to a subsonic inlet treatment,
             ! so call that routine

             call pRhoSubsonicInlet(icBeg(nn),icEnd(nn), &
                                    jcBeg(nn),jcEnd(nn), &
                                    kcBeg(nn),kcEnd(nn), &
                                    correctForK)

             ! Compute the total energy for these halo cells.

             call computeEtot(icBeg(nn),icEnd(nn), jcBeg(nn),jcEnd(nn), &
                              kcBeg(nn),kcEnd(nn), correctForK)

             ! Extrapolate the state vectors in case a second halo
             ! is needed.

             if( secondHalo ) call extrapolate2ndHalo(nn, correctForK)

         end select
       enddo bocos

       end subroutine bcDomainInterface
